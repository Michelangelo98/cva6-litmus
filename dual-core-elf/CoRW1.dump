
main.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <main-0x20>:
    80000000:	f1402573          	csrr	a0,mhartid
    80000004:	00010117          	auipc	sp,0x10
    80000008:	ffc10113          	addi	sp,sp,-4 # 80010000 <DRAM_TOP>
    8000000c:	00d51513          	slli	a0,a0,0xd
    80000010:	40a10133          	sub	sp,sp,a0
    80000014:	fe010113          	addi	sp,sp,-32
    80000018:	008000ef          	jal	ra,80000020 <main>
    8000001c:	0000006f          	j	8000001c <BOOT_MEM+0x1c>

0000000080000020 <main>:
#include "arch.h"
#include "rand.h"
#include "test.h"

int main()
{
    80000020:	7179                	addi	sp,sp,-48
    80000022:	f406                	sd	ra,40(sp)
    80000024:	f022                	sd	s0,32(sp)
    80000026:	ec26                	sd	s1,24(sp)
    80000028:	e84a                	sd	s2,16(sp)
  // Get my global process id
  int me = arch_get_process_id();
    8000002a:	6ea000ef          	jal	ra,80000714 <arch_get_process_id>

  // Processes not being used spin here
  if (me >= NUM_PROCESSES) while (1);
    8000002e:	00a05363          	blez	a0,80000034 <main+0x14>
    80000032:	a001                	j	80000032 <main+0x12>
    80000034:	84aa                	mv	s1,a0

  if (me == 0) {
    80000036:	c911                	beqz	a0,8000004a <main+0x2a>
    //put_string("Hello World!\n");
    log_init();
  }

  // Random seed
  uint32_t seed = 29823;
    80000038:	679d                	lui	a5,0x7
    8000003a:	47f7879b          	addiw	a5,a5,1151 # 747f <HARTID+0x656b>
    8000003e:	c63e                	sw	a5,12(sp)
    80000040:	06400413          	li	s0,100

  for (int i = 0; i < NUM_ITERATIONS; i++) {
    if (me == 0) test_init(&seed);
    80000044:	00c10913          	addi	s2,sp,12
    80000048:	a805                	j	80000078 <main+0x58>
    init_uart(50000000, 115200*4);
    8000004a:	000715b7          	lui	a1,0x71
    8000004e:	80058593          	addi	a1,a1,-2048 # 70800 <HARTID+0x6f8ec>
    80000052:	02faf537          	lui	a0,0x2faf
    80000056:	08050513          	addi	a0,a0,128 # 2faf080 <HARTID+0x2fae16c>
    8000005a:	77c000ef          	jal	ra,800007d6 <init_uart>
    log_init();
    8000005e:	12a000ef          	jal	ra,80000188 <log_init>
    80000062:	bfd9                	j	80000038 <main+0x18>
    if (me == 0) test_init(&seed);
    80000064:	854a                	mv	a0,s2
    80000066:	0bf000ef          	jal	ra,80000924 <test_init>
    test_body(me);
    8000006a:	4501                	li	a0,0
    8000006c:	12d000ef          	jal	ra,80000998 <test_body>
    if (me == 0) log_update();
    80000070:	25e000ef          	jal	ra,800002ce <log_update>
  for (int i = 0; i < NUM_ITERATIONS; i++) {
    80000074:	347d                	addiw	s0,s0,-1
    80000076:	c411                	beqz	s0,80000082 <main+0x62>
    if (me == 0) test_init(&seed);
    80000078:	d4f5                	beqz	s1,80000064 <main+0x44>
    test_body(me);
    8000007a:	8526                	mv	a0,s1
    8000007c:	11d000ef          	jal	ra,80000998 <test_body>
    if (me == 0) log_update();
    80000080:	bfd5                	j	80000074 <main+0x54>
  }

  if (me == 0) {
    80000082:	c881                	beqz	s1,80000092 <main+0x72>
    put_string("Time\n");
    //flush();
  }

  return 0;
}
    80000084:	4501                	li	a0,0
    80000086:	70a2                	ld	ra,40(sp)
    80000088:	7402                	ld	s0,32(sp)
    8000008a:	64e2                	ld	s1,24(sp)
    8000008c:	6942                	ld	s2,16(sp)
    8000008e:	6145                	addi	sp,sp,48
    80000090:	8082                	ret
    log_display();
    80000092:	3cc000ef          	jal	ra,8000045e <log_display>
    put_string("Time\n");
    80000096:	00001517          	auipc	a0,0x1
    8000009a:	9ea50513          	addi	a0,a0,-1558 # 80000a80 <.got.plt+0x10>
    8000009e:	006000ef          	jal	ra,800000a4 <put_string>
  return 0;
    800000a2:	b7cd                	j	80000084 <main+0x64>

00000000800000a4 <put_string>:
// ===============
// Output routines
// ===============

void put_string(char* s)
{
    800000a4:	1141                	addi	sp,sp,-16
    800000a6:	e406                	sd	ra,8(sp)
    800000a8:	e022                	sd	s0,0(sp)
    800000aa:	842a                	mv	s0,a0
  while (*s) { put_char(*s); s++; }
    800000ac:	00054503          	lbu	a0,0(a0)
    800000b0:	c519                	beqz	a0,800000be <put_string+0x1a>
    800000b2:	6d8000ef          	jal	ra,8000078a <put_char>
    800000b6:	0405                	addi	s0,s0,1
    800000b8:	00044503          	lbu	a0,0(s0)
    800000bc:	f97d                	bnez	a0,800000b2 <put_string+0xe>
}
    800000be:	60a2                	ld	ra,8(sp)
    800000c0:	6402                	ld	s0,0(sp)
    800000c2:	0141                	addi	sp,sp,16
    800000c4:	8082                	ret

00000000800000c6 <put_uint64>:
{
  put_uint64((uint64_t) i);
}

void put_uint64(uint64_t i)
{
    800000c6:	7139                	addi	sp,sp,-64
    800000c8:	fc06                	sd	ra,56(sp)
    800000ca:	f822                	sd	s0,48(sp)
    800000cc:	f426                	sd	s1,40(sp)
  char str[32];
  int n = 0;
  while (i > 0) { str[n] = '0' + (i % 10); i /= 10; n++; }
    800000ce:	c135                	beqz	a0,80000132 <put_uint64+0x6c>
    800000d0:	858a                	mv	a1,sp
    800000d2:	872e                	mv	a4,a1
    800000d4:	4629                	li	a2,10
    800000d6:	4805                	li	a6,1
    800000d8:	40b8083b          	subw	a6,a6,a1
    800000dc:	48a5                	li	a7,9
    800000de:	a011                	j	800000e2 <put_uint64+0x1c>
    800000e0:	8536                	mv	a0,a3
    800000e2:	02c576b3          	remu	a3,a0,a2
    800000e6:	0306869b          	addiw	a3,a3,48
    800000ea:	00d70023          	sb	a3,0(a4)
    800000ee:	02c556b3          	divu	a3,a0,a2
    800000f2:	00e807bb          	addw	a5,a6,a4
    800000f6:	0007849b          	sext.w	s1,a5
    800000fa:	0705                	addi	a4,a4,1
    800000fc:	fea8e2e3          	bltu	a7,a0,800000e0 <put_uint64+0x1a>
  if (n == 0)
    80000100:	c88d                	beqz	s1,80000132 <put_uint64+0x6c>
    put_char('0');
  else
    while (n > 0) { n--; put_char(str[n]); }
    80000102:	02905363          	blez	s1,80000128 <put_uint64+0x62>
    80000106:	840a                	mv	s0,sp
    80000108:	9426                	add	s0,s0,s1
    8000010a:	15fd                	addi	a1,a1,-1
    8000010c:	009587b3          	add	a5,a1,s1
    80000110:	34fd                	addiw	s1,s1,-1
    80000112:	1482                	slli	s1,s1,0x20
    80000114:	9081                	srli	s1,s1,0x20
    80000116:	409784b3          	sub	s1,a5,s1
    8000011a:	fff44503          	lbu	a0,-1(s0)
    8000011e:	66c000ef          	jal	ra,8000078a <put_char>
    80000122:	147d                	addi	s0,s0,-1
    80000124:	fe941be3          	bne	s0,s1,8000011a <put_uint64+0x54>
}
    80000128:	70e2                	ld	ra,56(sp)
    8000012a:	7442                	ld	s0,48(sp)
    8000012c:	74a2                	ld	s1,40(sp)
    8000012e:	6121                	addi	sp,sp,64
    80000130:	8082                	ret
    put_char('0');
    80000132:	03000513          	li	a0,48
    80000136:	654000ef          	jal	ra,8000078a <put_char>
    8000013a:	b7fd                	j	80000128 <put_uint64+0x62>

000000008000013c <put_uint32>:
{
    8000013c:	1141                	addi	sp,sp,-16
    8000013e:	e406                	sd	ra,8(sp)
  put_uint64((uint64_t) i);
    80000140:	1502                	slli	a0,a0,0x20
    80000142:	9101                	srli	a0,a0,0x20
    80000144:	f83ff0ef          	jal	ra,800000c6 <put_uint64>
}
    80000148:	60a2                	ld	ra,8(sp)
    8000014a:	0141                	addi	sp,sp,16
    8000014c:	8082                	ret

000000008000014e <put_int64>:

void put_int64(int64_t i)
{
    8000014e:	1141                	addi	sp,sp,-16
    80000150:	e406                	sd	ra,8(sp)
    80000152:	e022                	sd	s0,0(sp)
    80000154:	842a                	mv	s0,a0
  if (i < 0) {
    80000156:	00054963          	bltz	a0,80000168 <put_int64+0x1a>
    put_char('-');
    i = -i;
  }
  put_uint64 ((uint64_t) i);
    8000015a:	8522                	mv	a0,s0
    8000015c:	f6bff0ef          	jal	ra,800000c6 <put_uint64>
}
    80000160:	60a2                	ld	ra,8(sp)
    80000162:	6402                	ld	s0,0(sp)
    80000164:	0141                	addi	sp,sp,16
    80000166:	8082                	ret
    put_char('-');
    80000168:	02d00513          	li	a0,45
    8000016c:	61e000ef          	jal	ra,8000078a <put_char>
    i = -i;
    80000170:	40800433          	neg	s0,s0
    80000174:	b7dd                	j	8000015a <put_int64+0xc>

0000000080000176 <halt>:

void halt()
{
    80000176:	1141                	addi	sp,sp,-16
    80000178:	e406                	sd	ra,8(sp)
  put_string("Halted\n");
    8000017a:	00001517          	auipc	a0,0x1
    8000017e:	90e50513          	addi	a0,a0,-1778 # 80000a88 <.got.plt+0x18>
    80000182:	f23ff0ef          	jal	ra,800000a4 <put_string>
  while(1);
    80000186:	a001                	j	80000186 <halt+0x10>

0000000080000188 <log_init>:
// ==================

void log_init()
{
  //put_string("log_init started\r\n");
  global_log.hash_table = (log_entry_t*) HASH_TABLE_BASE;
    80000188:	00001797          	auipc	a5,0x1
    8000018c:	8d07b783          	ld	a5,-1840(a5) # 80000a58 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000190:	638c                	ld	a1,0(a5)
    80000192:	00001797          	auipc	a5,0x1
    80000196:	8d67b783          	ld	a5,-1834(a5) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000019a:	10058713          	addi	a4,a1,256
    8000019e:	e798                	sd	a4,8(a5)
  global_log.num_collisions = 0;
    800001a0:	0007a023          	sw	zero,0(a5)
  global_log.num_entries = 0;
    800001a4:	0007a223          	sw	zero,4(a5)
    800001a8:	4781                	li	a5,0
  for (int i = 0; i < HASH_TABLE_SIZE; i++)
    global_log.hash_table[i].count = 0;
    800001aa:	00001617          	auipc	a2,0x1
    800001ae:	8be63603          	ld	a2,-1858(a2) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
  for (int i = 0; i < HASH_TABLE_SIZE; i++)
    800001b2:	6691                	lui	a3,0x4
    global_log.hash_table[i].count = 0;
    800001b4:	6618                	ld	a4,8(a2)
    800001b6:	973e                	add	a4,a4,a5
    800001b8:	00073423          	sd	zero,8(a4)
  for (int i = 0; i < HASH_TABLE_SIZE; i++)
    800001bc:	07c1                	addi	a5,a5,16
    800001be:	fed79be3          	bne	a5,a3,800001b4 <log_init+0x2c>
  global_log.headstarts = (uint64_t*) HEADSTARTS_BASE;
    800001c2:	00001797          	auipc	a5,0x1
    800001c6:	8a67b783          	ld	a5,-1882(a5) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    800001ca:	eb8c                	sd	a1,16(a5)
    800001cc:	4781                	li	a5,0
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    global_log.headstarts[i] = 0;
    800001ce:	00001617          	auipc	a2,0x1
    800001d2:	89a63603          	ld	a2,-1894(a2) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    800001d6:	10000693          	li	a3,256
    global_log.headstarts[i] = 0;
    800001da:	6a18                	ld	a4,16(a2)
    800001dc:	973e                	add	a4,a4,a5
    800001de:	00073023          	sd	zero,0(a4)
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    800001e2:	07a1                	addi	a5,a5,8
    800001e4:	fed79be3          	bne	a5,a3,800001da <log_init+0x52>
}
    800001e8:	8082                	ret

00000000800001ea <log_headstart>:
                        (int64_t) test.start_times[0];
    headstart += NUM_HEADSTARTS/2;
    if (headstart >= 0 && headstart < NUM_HEADSTARTS)
      global_log.headstarts[headstart]++;
  }
}
    800001ea:	8082                	ret

00000000800001ec <log_add_outcome>:

// Hash table based on code from litmus tool by Luc Maranget and
// Susmit Sarkar.  See <http://diy.inria.fr>.

void log_add_outcome()
{
    800001ec:	1141                	addi	sp,sp,-16
    800001ee:	e406                	sd	ra,8(sp)
  uint32_t h = hash( (uint8_t *) test.outcome
    800001f0:	4601                	li	a2,0
    800001f2:	45a1                	li	a1,8
    800001f4:	00001517          	auipc	a0,0x1
    800001f8:	86c53503          	ld	a0,-1940(a0) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    800001fc:	270000ef          	jal	ra,8000046c <hash>
                   , LEN_OUTCOME*sizeof(var_t)
                   , 0 );
#if DEBUG
  var_t sought[] = OUTCOME_SOUGHT;
#endif
  h = h % HASH_TABLE_SIZE;
    80000200:	3ff57513          	andi	a0,a0,1023
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    log_entry_t *entry = global_log.hash_table + h;
    80000204:	00001797          	auipc	a5,0x1
    80000208:	8647b783          	ld	a5,-1948(a5) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000020c:	0087b883          	ld	a7,8(a5)
    80000210:	00451793          	slli	a5,a0,0x4
    80000214:	97c6                	add	a5,a5,a7
    if (entry->count == 0) { /* New entry */
    80000216:	0087b803          	ld	a6,8(a5)
    8000021a:	08080863          	beqz	a6,800002aa <log_add_outcome+0xbe>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    8000021e:	4681                	li	a3,0
      return;
    }
    else {
      int found = 1;
      for (int j = 0; j < LEN_OUTCOME; j++)
        if (entry->outcome[j] != test.outcome[j]) { found = 0; break; }
    80000220:	00001597          	auipc	a1,0x1
    80000224:	8405b583          	ld	a1,-1984(a1) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    80000228:	40000313          	li	t1,1024
    8000022c:	a8b9                	j	8000028a <log_add_outcome+0x9e>
        entry->outcome[j] = test.outcome[j];
    8000022e:	00001717          	auipc	a4,0x1
    80000232:	83273703          	ld	a4,-1998(a4) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000236:	4310                	lw	a2,0(a4)
    80000238:	c390                	sw	a2,0(a5)
    8000023a:	4358                	lw	a4,4(a4)
    8000023c:	c3d8                	sw	a4,4(a5)
      entry->count = 1;
    8000023e:	4705                	li	a4,1
    80000240:	e798                	sd	a4,8(a5)
      global_log.num_entries++;
    80000242:	00001717          	auipc	a4,0x1
    80000246:	82673703          	ld	a4,-2010(a4) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000024a:	435c                	lw	a5,4(a4)
    8000024c:	2785                	addiw	a5,a5,1
    8000024e:	c35c                	sw	a5,4(a4)
      if (i != 0) global_log.num_collisions++;
    80000250:	cab1                	beqz	a3,800002a4 <log_add_outcome+0xb8>
    80000252:	00001717          	auipc	a4,0x1
    80000256:	81673703          	ld	a4,-2026(a4) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000025a:	431c                	lw	a5,0(a4)
    8000025c:	2785                	addiw	a5,a5,1
    8000025e:	c31c                	sw	a5,0(a4)
    80000260:	a091                	j	800002a4 <log_add_outcome+0xb8>
        return;
      }
    }
    h = (h+1) % HASH_TABLE_SIZE;
  }
  put_string("Hash table is full\n");
    80000262:	00001517          	auipc	a0,0x1
    80000266:	82e50513          	addi	a0,a0,-2002 # 80000a90 <.got.plt+0x20>
    8000026a:	e3bff0ef          	jal	ra,800000a4 <put_string>
    8000026e:	a81d                	j	800002a4 <log_add_outcome+0xb8>
    h = (h+1) % HASH_TABLE_SIZE;
    80000270:	2505                	addiw	a0,a0,1
    80000272:	3ff57513          	andi	a0,a0,1023
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    80000276:	2685                	addiw	a3,a3,1 # 4001 <HARTID+0x30ed>
    80000278:	fe6685e3          	beq	a3,t1,80000262 <log_add_outcome+0x76>
    log_entry_t *entry = global_log.hash_table + h;
    8000027c:	00451793          	slli	a5,a0,0x4
    80000280:	97c6                	add	a5,a5,a7
    if (entry->count == 0) { /* New entry */
    80000282:	0087b803          	ld	a6,8(a5)
    80000286:	fa0804e3          	beqz	a6,8000022e <log_add_outcome+0x42>
        if (entry->outcome[j] != test.outcome[j]) { found = 0; break; }
    8000028a:	4198                	lw	a4,0(a1)
    8000028c:	2701                	sext.w	a4,a4
    8000028e:	4390                	lw	a2,0(a5)
    80000290:	fee610e3          	bne	a2,a4,80000270 <log_add_outcome+0x84>
    80000294:	41d8                	lw	a4,4(a1)
    80000296:	2701                	sext.w	a4,a4
    80000298:	43d0                	lw	a2,4(a5)
    8000029a:	fce61be3          	bne	a2,a4,80000270 <log_add_outcome+0x84>
        entry->count++;
    8000029e:	0805                	addi	a6,a6,1
    800002a0:	0107b423          	sd	a6,8(a5)
}
    800002a4:	60a2                	ld	ra,8(sp)
    800002a6:	0141                	addi	sp,sp,16
    800002a8:	8082                	ret
        entry->outcome[j] = test.outcome[j];
    800002aa:	00000717          	auipc	a4,0x0
    800002ae:	7b673703          	ld	a4,1974(a4) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    800002b2:	4314                	lw	a3,0(a4)
    800002b4:	c394                	sw	a3,0(a5)
    800002b6:	4358                	lw	a4,4(a4)
    800002b8:	c3d8                	sw	a4,4(a5)
      entry->count = 1;
    800002ba:	4705                	li	a4,1
    800002bc:	e798                	sd	a4,8(a5)
      global_log.num_entries++;
    800002be:	00000717          	auipc	a4,0x0
    800002c2:	7aa73703          	ld	a4,1962(a4) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    800002c6:	435c                	lw	a5,4(a4)
    800002c8:	2785                	addiw	a5,a5,1
    800002ca:	c35c                	sw	a5,4(a4)
      if (i != 0) global_log.num_collisions++;
    800002cc:	bfe1                	j	800002a4 <log_add_outcome+0xb8>

00000000800002ce <log_update>:
// Updating the log
// ================


void log_update()
{
    800002ce:	1141                	addi	sp,sp,-16
    800002d0:	e406                	sd	ra,8(sp)
  log_headstart();
  log_add_outcome();
    800002d2:	f1bff0ef          	jal	ra,800001ec <log_add_outcome>
}
    800002d6:	60a2                	ld	ra,8(sp)
    800002d8:	0141                	addi	sp,sp,16
    800002da:	8082                	ret

00000000800002dc <log_display_outcome>:
// ==================
// Displaying the log
// ==================

void log_display_outcome()
{
    800002dc:	7159                	addi	sp,sp,-112
    800002de:	f486                	sd	ra,104(sp)
    800002e0:	f0a2                	sd	s0,96(sp)
    800002e2:	eca6                	sd	s1,88(sp)
    800002e4:	e8ca                	sd	s2,80(sp)
    800002e6:	e4ce                	sd	s3,72(sp)
    800002e8:	e0d2                	sd	s4,64(sp)
    800002ea:	fc56                	sd	s5,56(sp)
    800002ec:	f85a                	sd	s6,48(sp)
    800002ee:	f45e                	sd	s7,40(sp)
    800002f0:	f062                	sd	s8,32(sp)
    800002f2:	ec66                	sd	s9,24(sp)
    800002f4:	e86a                	sd	s10,16(sp)
    800002f6:	e46e                	sd	s11,8(sp)
    800002f8:	4481                	li	s1,0
  char* outcome_names[] = OUTCOME_NAMES;
  var_t sought[] = OUTCOME_SOUGHT;
  int found = 0;
    800002fa:	4c81                	li	s9,0
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    log_entry_t *entry = global_log.hash_table + i;
    800002fc:	00000917          	auipc	s2,0x0
    80000300:	76c93903          	ld	s2,1900(s2) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    if (entry->count != 0) {
      put_uint64(entry->count);
      put_string(":> ");
    80000304:	00000b97          	auipc	s7,0x0
    80000308:	7b4b8b93          	addi	s7,s7,1972 # 80000ab8 <.got.plt+0x48>
      int got = 1;
      for (int j = 0; j < LEN_OUTCOME; j++) {
        if (entry->outcome[j] != sought[j]) got = 0;
        put_string(outcome_names[j]);
    8000030c:	00000b17          	auipc	s6,0x0
    80000310:	7b4b0b13          	addi	s6,s6,1972 # 80000ac0 <.got.plt+0x50>
        put_string("=");
    80000314:	00000a17          	auipc	s4,0x0
    80000318:	7b4a0a13          	addi	s4,s4,1972 # 80000ac8 <.got.plt+0x58>
        put_uint32((uint32_t) entry->outcome[j]);
        put_string("; ");
    8000031c:	00000997          	auipc	s3,0x0
    80000320:	7b498993          	addi	s3,s3,1972 # 80000ad0 <.got.plt+0x60>
        put_string(outcome_names[j]);
    80000324:	00000c17          	auipc	s8,0x0
    80000328:	7b4c0c13          	addi	s8,s8,1972 # 80000ad8 <.got.plt+0x68>
      }
      if (got == 1) found = 1;
      put_string("\n");
    8000032c:	00000a97          	auipc	s5,0x0
    80000330:	7b4a8a93          	addi	s5,s5,1972 # 80000ae0 <.got.plt+0x70>
      if (got == 1) found = 1;
    80000334:	4d05                	li	s10,1
    80000336:	a03d                	j	80000364 <log_display_outcome+0x88>
        put_string(outcome_names[j]);
    80000338:	8562                	mv	a0,s8
    8000033a:	d6bff0ef          	jal	ra,800000a4 <put_string>
        put_string("=");
    8000033e:	8552                	mv	a0,s4
    80000340:	d65ff0ef          	jal	ra,800000a4 <put_string>
        put_uint32((uint32_t) entry->outcome[j]);
    80000344:	4048                	lw	a0,4(s0)
    80000346:	df7ff0ef          	jal	ra,8000013c <put_uint32>
        put_string("; ");
    8000034a:	854e                	mv	a0,s3
    8000034c:	d59ff0ef          	jal	ra,800000a4 <put_string>
      if (got == 1) found = 1;
    80000350:	01ad9363          	bne	s11,s10,80000356 <log_display_outcome+0x7a>
    80000354:	8cee                	mv	s9,s11
      put_string("\n");
    80000356:	8556                	mv	a0,s5
    80000358:	d4dff0ef          	jal	ra,800000a4 <put_string>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    8000035c:	04c1                	addi	s1,s1,16
    8000035e:	6791                	lui	a5,0x4
    80000360:	04f48b63          	beq	s1,a5,800003b6 <log_display_outcome+0xda>
    log_entry_t *entry = global_log.hash_table + i;
    80000364:	00893403          	ld	s0,8(s2)
    80000368:	9426                	add	s0,s0,s1
    if (entry->count != 0) {
    8000036a:	6408                	ld	a0,8(s0)
    8000036c:	d965                	beqz	a0,8000035c <log_display_outcome+0x80>
      put_uint64(entry->count);
    8000036e:	d59ff0ef          	jal	ra,800000c6 <put_uint64>
      put_string(":> ");
    80000372:	855e                	mv	a0,s7
    80000374:	d31ff0ef          	jal	ra,800000a4 <put_string>
        if (entry->outcome[j] != sought[j]) got = 0;
    80000378:	00042d83          	lw	s11,0(s0)
    8000037c:	001dbd93          	seqz	s11,s11
        put_string(outcome_names[j]);
    80000380:	855a                	mv	a0,s6
    80000382:	d23ff0ef          	jal	ra,800000a4 <put_string>
        put_string("=");
    80000386:	8552                	mv	a0,s4
    80000388:	d1dff0ef          	jal	ra,800000a4 <put_string>
        put_uint32((uint32_t) entry->outcome[j]);
    8000038c:	4008                	lw	a0,0(s0)
    8000038e:	dafff0ef          	jal	ra,8000013c <put_uint32>
        put_string("; ");
    80000392:	854e                	mv	a0,s3
    80000394:	d11ff0ef          	jal	ra,800000a4 <put_string>
        if (entry->outcome[j] != sought[j]) got = 0;
    80000398:	405c                	lw	a5,4(s0)
    8000039a:	dfd9                	beqz	a5,80000338 <log_display_outcome+0x5c>
        put_string(outcome_names[j]);
    8000039c:	8562                	mv	a0,s8
    8000039e:	d07ff0ef          	jal	ra,800000a4 <put_string>
        put_string("=");
    800003a2:	8552                	mv	a0,s4
    800003a4:	d01ff0ef          	jal	ra,800000a4 <put_string>
        put_uint32((uint32_t) entry->outcome[j]);
    800003a8:	4048                	lw	a0,4(s0)
    800003aa:	d93ff0ef          	jal	ra,8000013c <put_uint32>
        put_string("; ");
    800003ae:	854e                	mv	a0,s3
    800003b0:	cf5ff0ef          	jal	ra,800000a4 <put_string>
      if (got == 1) found = 1;
    800003b4:	b74d                	j	80000356 <log_display_outcome+0x7a>
    }
  }
  put_string(found ? "Ok\n" : "No\n");
    800003b6:	00000517          	auipc	a0,0x0
    800003ba:	6f250513          	addi	a0,a0,1778 # 80000aa8 <.got.plt+0x38>
    800003be:	000c9663          	bnez	s9,800003ca <log_display_outcome+0xee>
    800003c2:	00000517          	auipc	a0,0x0
    800003c6:	6ee50513          	addi	a0,a0,1774 # 80000ab0 <.got.plt+0x40>
    800003ca:	cdbff0ef          	jal	ra,800000a4 <put_string>
}
    800003ce:	70a6                	ld	ra,104(sp)
    800003d0:	7406                	ld	s0,96(sp)
    800003d2:	64e6                	ld	s1,88(sp)
    800003d4:	6946                	ld	s2,80(sp)
    800003d6:	69a6                	ld	s3,72(sp)
    800003d8:	6a06                	ld	s4,64(sp)
    800003da:	7ae2                	ld	s5,56(sp)
    800003dc:	7b42                	ld	s6,48(sp)
    800003de:	7ba2                	ld	s7,40(sp)
    800003e0:	7c02                	ld	s8,32(sp)
    800003e2:	6ce2                	ld	s9,24(sp)
    800003e4:	6d42                	ld	s10,16(sp)
    800003e6:	6da2                	ld	s11,8(sp)
    800003e8:	6165                	addi	sp,sp,112
    800003ea:	8082                	ret

00000000800003ec <log_display_headstart>:

void log_display_headstart()
{
    800003ec:	7139                	addi	sp,sp,-64
    800003ee:	fc06                	sd	ra,56(sp)
    800003f0:	f822                	sd	s0,48(sp)
    800003f2:	f426                	sd	s1,40(sp)
    800003f4:	f04a                	sd	s2,32(sp)
    800003f6:	ec4e                	sd	s3,24(sp)
    800003f8:	e852                	sd	s4,16(sp)
    800003fa:	e456                	sd	s5,8(sp)
  int64_t mid = NUM_HEADSTARTS/2;
  put_string("\nHeadstarts:\n");
    800003fc:	00000517          	auipc	a0,0x0
    80000400:	6ec50513          	addi	a0,a0,1772 # 80000ae8 <.got.plt+0x78>
    80000404:	ca1ff0ef          	jal	ra,800000a4 <put_string>
    80000408:	4481                	li	s1,0
    8000040a:	5441                	li	s0,-16
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    put_int64(i-mid);
    put_string(": ");
    8000040c:	00000a97          	auipc	s5,0x0
    80000410:	6eca8a93          	addi	s5,s5,1772 # 80000af8 <.got.plt+0x88>
    put_int64(global_log.headstarts[i]);
    80000414:	00000a17          	auipc	s4,0x0
    80000418:	654a3a03          	ld	s4,1620(s4) # 80000a68 <_GLOBAL_OFFSET_TABLE_+0x18>
    put_string("\n");
    8000041c:	00000997          	auipc	s3,0x0
    80000420:	6c498993          	addi	s3,s3,1732 # 80000ae0 <.got.plt+0x70>
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    80000424:	4941                	li	s2,16
    put_int64(i-mid);
    80000426:	8522                	mv	a0,s0
    80000428:	d27ff0ef          	jal	ra,8000014e <put_int64>
    put_string(": ");
    8000042c:	8556                	mv	a0,s5
    8000042e:	c77ff0ef          	jal	ra,800000a4 <put_string>
    put_int64(global_log.headstarts[i]);
    80000432:	010a3783          	ld	a5,16(s4)
    80000436:	97a6                	add	a5,a5,s1
    80000438:	6388                	ld	a0,0(a5)
    8000043a:	d15ff0ef          	jal	ra,8000014e <put_int64>
    put_string("\n");
    8000043e:	854e                	mv	a0,s3
    80000440:	c65ff0ef          	jal	ra,800000a4 <put_string>
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    80000444:	0405                	addi	s0,s0,1
    80000446:	04a1                	addi	s1,s1,8
    80000448:	fd241fe3          	bne	s0,s2,80000426 <log_display_headstart+0x3a>
  }
}
    8000044c:	70e2                	ld	ra,56(sp)
    8000044e:	7442                	ld	s0,48(sp)
    80000450:	74a2                	ld	s1,40(sp)
    80000452:	7902                	ld	s2,32(sp)
    80000454:	69e2                	ld	s3,24(sp)
    80000456:	6a42                	ld	s4,16(sp)
    80000458:	6aa2                	ld	s5,8(sp)
    8000045a:	6121                	addi	sp,sp,64
    8000045c:	8082                	ret

000000008000045e <log_display>:

void log_display()
{
    8000045e:	1141                	addi	sp,sp,-16
    80000460:	e406                	sd	ra,8(sp)
  //put_string("log_display started\r\n");
  log_display_outcome();
    80000462:	e7bff0ef          	jal	ra,800002dc <log_display_outcome>
  #ifdef SHOW_HEADSTARTS
  log_display_headstart();
  #endif
}
    80000466:	60a2                	ld	ra,8(sp)
    80000468:	0141                	addi	sp,sp,16
    8000046a:	8082                	ret

000000008000046c <hash>:
   len = length;
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
   c = initval;         /* the previous hash value */

   /* handle most of the key */
   while (len >= 12)
    8000046c:	47ad                	li	a5,11
    8000046e:	14b7f063          	bgeu	a5,a1,800005ae <hash+0x142>
   len = length;
    80000472:	882e                	mv	a6,a1
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    80000474:	9e3786b7          	lui	a3,0x9e378
    80000478:	9b968693          	addi	a3,a3,-1607 # ffffffff9e3779b9 <DRAM_TOP+0xffffffff1e3679b9>
    8000047c:	8e36                	mv	t3,a3
   while (len >= 12)
    8000047e:	48ad                	li	a7,11
   {
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
      b += (k[4] +((ub4)k[5]<<8) +((ub4)k[6]<<16) +((ub4)k[7]<<24));
    80000480:	00554303          	lbu	t1,5(a0)
    80000484:	0083131b          	slliw	t1,t1,0x8
    80000488:	00654783          	lbu	a5,6(a0)
    8000048c:	0107979b          	slliw	a5,a5,0x10
    80000490:	00f3033b          	addw	t1,t1,a5
    80000494:	00454783          	lbu	a5,4(a0)
    80000498:	00f3033b          	addw	t1,t1,a5
    8000049c:	00754783          	lbu	a5,7(a0)
    800004a0:	0187979b          	slliw	a5,a5,0x18
    800004a4:	00f3033b          	addw	t1,t1,a5
    800004a8:	00d306bb          	addw	a3,t1,a3
      c += (k[8] +((ub4)k[9]<<8) +((ub4)k[10]<<16)+((ub4)k[11]<<24));
    800004ac:	00954303          	lbu	t1,9(a0)
    800004b0:	0083131b          	slliw	t1,t1,0x8
    800004b4:	00a54783          	lbu	a5,10(a0)
    800004b8:	0107979b          	slliw	a5,a5,0x10
    800004bc:	00f3033b          	addw	t1,t1,a5
    800004c0:	00854783          	lbu	a5,8(a0)
    800004c4:	00f3033b          	addw	t1,t1,a5
    800004c8:	00b54783          	lbu	a5,11(a0)
    800004cc:	0187979b          	slliw	a5,a5,0x18
    800004d0:	00f3033b          	addw	t1,t1,a5
    800004d4:	00c3063b          	addw	a2,t1,a2
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    800004d8:	00154783          	lbu	a5,1(a0)
    800004dc:	0087979b          	slliw	a5,a5,0x8
    800004e0:	00254703          	lbu	a4,2(a0)
    800004e4:	0107171b          	slliw	a4,a4,0x10
      mix(a,b,c);
    800004e8:	9fb9                	addw	a5,a5,a4
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    800004ea:	00054703          	lbu	a4,0(a0)
      mix(a,b,c);
    800004ee:	9fb9                	addw	a5,a5,a4
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    800004f0:	00354703          	lbu	a4,3(a0)
    800004f4:	0187171b          	slliw	a4,a4,0x18
      mix(a,b,c);
    800004f8:	9fb9                	addw	a5,a5,a4
    800004fa:	9f95                	subw	a5,a5,a3
    800004fc:	9f91                	subw	a5,a5,a2
    800004fe:	01c787bb          	addw	a5,a5,t3
    80000502:	00d6571b          	srliw	a4,a2,0xd
    80000506:	8fb9                	xor	a5,a5,a4
    80000508:	2781                	sext.w	a5,a5
    8000050a:	9e91                	subw	a3,a3,a2
    8000050c:	40f6833b          	subw	t1,a3,a5
    80000510:	0087969b          	slliw	a3,a5,0x8
    80000514:	0066c6b3          	xor	a3,a3,t1
    80000518:	2681                	sext.w	a3,a3
    8000051a:	9e1d                	subw	a2,a2,a5
    8000051c:	9e15                	subw	a2,a2,a3
    8000051e:	00d6d71b          	srliw	a4,a3,0xd
    80000522:	8f31                	xor	a4,a4,a2
    80000524:	2701                	sext.w	a4,a4
    80000526:	9f95                	subw	a5,a5,a3
    80000528:	40e7863b          	subw	a2,a5,a4
    8000052c:	00c7579b          	srliw	a5,a4,0xc
    80000530:	8fb1                	xor	a5,a5,a2
    80000532:	2781                	sext.w	a5,a5
    80000534:	9e99                	subw	a3,a3,a4
    80000536:	40f6863b          	subw	a2,a3,a5
    8000053a:	0107969b          	slliw	a3,a5,0x10
    8000053e:	8eb1                	xor	a3,a3,a2
    80000540:	2681                	sext.w	a3,a3
    80000542:	9f1d                	subw	a4,a4,a5
    80000544:	40d7063b          	subw	a2,a4,a3
    80000548:	0056d71b          	srliw	a4,a3,0x5
    8000054c:	8f31                	xor	a4,a4,a2
    8000054e:	2701                	sext.w	a4,a4
    80000550:	9f95                	subw	a5,a5,a3
    80000552:	9f99                	subw	a5,a5,a4
    80000554:	00375e1b          	srliw	t3,a4,0x3
    80000558:	00fe47b3          	xor	a5,t3,a5
    8000055c:	00078e1b          	sext.w	t3,a5
    80000560:	9e99                	subw	a3,a3,a4
    80000562:	41c686bb          	subw	a3,a3,t3
    80000566:	00ae131b          	slliw	t1,t3,0xa
    8000056a:	00d346b3          	xor	a3,t1,a3
    8000056e:	2681                	sext.w	a3,a3
    80000570:	41c7073b          	subw	a4,a4,t3
    80000574:	9f15                	subw	a4,a4,a3
    80000576:	00f6d61b          	srliw	a2,a3,0xf
    8000057a:	8f31                	xor	a4,a4,a2
    8000057c:	0007061b          	sext.w	a2,a4
      k += 12; len -= 12;
    80000580:	0531                	addi	a0,a0,12
    80000582:	3851                	addiw	a6,a6,-12
   while (len >= 12)
    80000584:	ef08eee3          	bltu	a7,a6,80000480 <hash+0x14>
   }

   /* handle the last 11 bytes */
   c += length;
    80000588:	9e2d                	addw	a2,a2,a1
    8000058a:	0006089b          	sext.w	a7,a2
   switch(len) /* all the case statements fall through */
    8000058e:	47ad                	li	a5,11
    80000590:	0b07e063          	bltu	a5,a6,80000630 <hash+0x1c4>
    80000594:	1802                	slli	a6,a6,0x20
    80000596:	02085813          	srli	a6,a6,0x20
    8000059a:	080a                	slli	a6,a6,0x2
    8000059c:	00000717          	auipc	a4,0x0
    800005a0:	56070713          	addi	a4,a4,1376 # 80000afc <.got.plt+0x8c>
    800005a4:	983a                	add	a6,a6,a4
    800005a6:	00082783          	lw	a5,0(a6)
    800005aa:	97ba                	add	a5,a5,a4
    800005ac:	8782                	jr	a5
   len = length;
    800005ae:	882e                	mv	a6,a1
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    800005b0:	9e3786b7          	lui	a3,0x9e378
    800005b4:	9b968693          	addi	a3,a3,-1607 # ffffffff9e3779b9 <DRAM_TOP+0xffffffff1e3679b9>
    800005b8:	8e36                	mv	t3,a3
    800005ba:	b7f9                	j	80000588 <hash+0x11c>
   {
   case 11: c+=((ub4)k[10]<<24);
    800005bc:	00a54883          	lbu	a7,10(a0)
    800005c0:	0188989b          	slliw	a7,a7,0x18
    800005c4:	00c888bb          	addw	a7,a7,a2
   case 10: c+=((ub4)k[9]<<16);
    800005c8:	00954783          	lbu	a5,9(a0)
    800005cc:	0107979b          	slliw	a5,a5,0x10
    800005d0:	011788bb          	addw	a7,a5,a7
   case 9 : c+=((ub4)k[8]<<8);
    800005d4:	00854783          	lbu	a5,8(a0)
    800005d8:	0087979b          	slliw	a5,a5,0x8
    800005dc:	011788bb          	addw	a7,a5,a7
      /* the first byte of c is reserved for the length */
   case 8 : b+=((ub4)k[7]<<24);
    800005e0:	00754783          	lbu	a5,7(a0)
    800005e4:	0187979b          	slliw	a5,a5,0x18
    800005e8:	9ebd                	addw	a3,a3,a5
   case 7 : b+=((ub4)k[6]<<16);
    800005ea:	00654783          	lbu	a5,6(a0)
    800005ee:	0107979b          	slliw	a5,a5,0x10
    800005f2:	9ebd                	addw	a3,a3,a5
   case 6 : b+=((ub4)k[5]<<8);
    800005f4:	00554783          	lbu	a5,5(a0)
    800005f8:	0087979b          	slliw	a5,a5,0x8
    800005fc:	9ebd                	addw	a3,a3,a5
   case 5 : b+=k[4];
    800005fe:	00454783          	lbu	a5,4(a0)
    80000602:	9ebd                	addw	a3,a3,a5
   case 4 : a+=((ub4)k[3]<<24);
    80000604:	00354783          	lbu	a5,3(a0)
    80000608:	0187979b          	slliw	a5,a5,0x18
    8000060c:	01c78e3b          	addw	t3,a5,t3
   case 3 : a+=((ub4)k[2]<<16);
    80000610:	00254783          	lbu	a5,2(a0)
    80000614:	0107979b          	slliw	a5,a5,0x10
    80000618:	01c78e3b          	addw	t3,a5,t3
   case 2 : a+=((ub4)k[1]<<8);
    8000061c:	00154783          	lbu	a5,1(a0)
    80000620:	0087979b          	slliw	a5,a5,0x8
    80000624:	01c78e3b          	addw	t3,a5,t3
   case 1 : a+=k[0];
    80000628:	00054783          	lbu	a5,0(a0)
    8000062c:	01c78e3b          	addw	t3,a5,t3
     /* case 0: nothing left to add */
   }
   mix(a,b,c);
    80000630:	011687bb          	addw	a5,a3,a7
    80000634:	40fe07bb          	subw	a5,t3,a5
    80000638:	00d8de1b          	srliw	t3,a7,0xd
    8000063c:	00fe4e33          	xor	t3,t3,a5
    80000640:	2e01                	sext.w	t3,t3
    80000642:	411686bb          	subw	a3,a3,a7
    80000646:	41c686bb          	subw	a3,a3,t3
    8000064a:	008e171b          	slliw	a4,t3,0x8
    8000064e:	8eb9                	xor	a3,a3,a4
    80000650:	2681                	sext.w	a3,a3
    80000652:	41c888bb          	subw	a7,a7,t3
    80000656:	40d888bb          	subw	a7,a7,a3
    8000065a:	00d6d59b          	srliw	a1,a3,0xd
    8000065e:	0115c5b3          	xor	a1,a1,a7
    80000662:	2581                	sext.w	a1,a1
    80000664:	40de0e3b          	subw	t3,t3,a3
    80000668:	40be0e3b          	subw	t3,t3,a1
    8000066c:	00c5d61b          	srliw	a2,a1,0xc
    80000670:	01c64633          	xor	a2,a2,t3
    80000674:	2601                	sext.w	a2,a2
    80000676:	9e8d                	subw	a3,a3,a1
    80000678:	9e91                	subw	a3,a3,a2
    8000067a:	0106171b          	slliw	a4,a2,0x10
    8000067e:	8f35                	xor	a4,a4,a3
    80000680:	2701                	sext.w	a4,a4
    80000682:	9d91                	subw	a1,a1,a2
    80000684:	9d99                	subw	a1,a1,a4
    80000686:	0057579b          	srliw	a5,a4,0x5
    8000068a:	8fad                	xor	a5,a5,a1
    8000068c:	2781                	sext.w	a5,a5
    8000068e:	9e19                	subw	a2,a2,a4
    80000690:	9e1d                	subw	a2,a2,a5
    80000692:	0037d69b          	srliw	a3,a5,0x3
    80000696:	8e35                	xor	a2,a2,a3
    80000698:	2601                	sext.w	a2,a2
    8000069a:	9f1d                	subw	a4,a4,a5
    8000069c:	9f11                	subw	a4,a4,a2
    8000069e:	00a6169b          	slliw	a3,a2,0xa
    800006a2:	8f35                	xor	a4,a4,a3
    800006a4:	2701                	sext.w	a4,a4
    800006a6:	9f91                	subw	a5,a5,a2
    800006a8:	9f99                	subw	a5,a5,a4
    800006aa:	00f7571b          	srliw	a4,a4,0xf
    800006ae:	8fb9                	xor	a5,a5,a4
   /* report the result */
   return c;
}
    800006b0:	0007851b          	sext.w	a0,a5
    800006b4:	8082                	ret

00000000800006b6 <rand_bit>:

static const uint32_t a = 69069;
static const uint32_t c = 25173;

inline static uint32_t unlocked_rand(uint32_t *st)  {
  uint32_t r = a * *st + c ;
    800006b6:	411c                	lw	a5,0(a0)
    800006b8:	6745                	lui	a4,0x11
    800006ba:	dcd7071b          	addiw	a4,a4,-563 # 10dcd <HARTID+0xfeb9>
    800006be:	02e787bb          	mulw	a5,a5,a4
    800006c2:	6719                	lui	a4,0x6
    800006c4:	2557071b          	addiw	a4,a4,597 # 6255 <HARTID+0x5341>
    800006c8:	9fb9                	addw	a5,a5,a4
  *st = r ;
    800006ca:	c11c                	sw	a5,0(a0)
  /* Swap high & low bits */
  uint32_t low = r & 0xffff ;
  uint32_t high = r >> 16 ;
  r = high | (low << 16) ;
    800006cc:	0107d51b          	srliw	a0,a5,0x10

int rand_bit(uint32_t *st)  {
  uint32_t r = unlocked_rand(st) ;
  r &= 1 ;
  return r ; 
}
    800006d0:	8905                	andi	a0,a0,1
    800006d2:	8082                	ret

00000000800006d4 <rand_k>:

uint32_t rand_k(uint32_t *st, uint32_t k) {
    800006d4:	832a                	mv	t1,a0
    800006d6:	4118                	lw	a4,0(a0)
  uint32_t r = a * *st + c ;
    800006d8:	68c5                	lui	a7,0x11
    800006da:	dcd8889b          	addiw	a7,a7,-563 # 10dcd <HARTID+0xfeb9>
    800006de:	6819                	lui	a6,0x6
    800006e0:	2558081b          	addiw	a6,a6,597 # 6255 <HARTID+0x5341>
  uint32_t r, v ;
  do {
    r = unlocked_rand(st) ;
    v = r % k ;
  } while (r-v > 0xffffffff-k+1) ;
    800006e4:	40b0063b          	negw	a2,a1
    800006e8:	2601                	sext.w	a2,a2
  uint32_t r = a * *st + c ;
    800006ea:	0317073b          	mulw	a4,a4,a7
    800006ee:	0107073b          	addw	a4,a4,a6
  r = high | (low << 16) ;
    800006f2:	0107179b          	slliw	a5,a4,0x10
    800006f6:	0107569b          	srliw	a3,a4,0x10
    800006fa:	8fd5                	or	a5,a5,a3
    800006fc:	2781                	sext.w	a5,a5
    v = r % k ;
    800006fe:	02b7f6bb          	remuw	a3,a5,a1
    80000702:	0006851b          	sext.w	a0,a3
  *st = r ;
    80000706:	2701                	sext.w	a4,a4
  } while (r-v > 0xffffffff-k+1) ;
    80000708:	9f95                	subw	a5,a5,a3
    8000070a:	fef660e3          	bltu	a2,a5,800006ea <rand_k+0x16>
    8000070e:	00e32023          	sw	a4,0(t1)
  return v ;
}
    80000712:	8082                	ret

0000000080000714 <arch_get_process_id>:
// Hardware thread id =========================================================

int arch_get_process_id()
{
  uint64_t x;
  asm volatile("csrr %0, 0xf14" : "=r" (x));  //CSRRS rd, csr, x0
    80000714:	f1402573          	csrr	a0,mhartid
  return (int) x;
}
    80000718:	2501                	sext.w	a0,a0
    8000071a:	8082                	ret

000000008000071c <arch_get_counter>:
// Hardware counter ===========================================================

uint32_t arch_get_counter()
{
  uint64_t x;
  asm volatile("csrr %0, mcycle" : "=r" (x));
    8000071c:	b0002573          	csrr	a0,mcycle
  return (int) x;
}
    80000720:	2501                	sext.w	a0,a0
    80000722:	8082                	ret

0000000080000724 <barrier_wait>:
    volatile uint64_t* barrier
  , uint64_t incr_amount
  , uint64_t reach
  )
{
  asm volatile (
    80000724:	00b5332f          	amoadd.d	t1,a1,(a0)
    80000728:	0ff0000f          	fence
    8000072c:	00053303          	ld	t1,0(a0)
    80000730:	fec31ce3          	bne	t1,a2,80000728 <barrier_wait+0x4>
    "r"(incr_amount),
    "r"(reach)
  : /* clobbered registers */
    "x6"
  );
}
    80000734:	8082                	ret

0000000080000736 <arch_barrier_up>:

void arch_barrier_up()
{
    80000736:	1141                	addi	sp,sp,-16
    80000738:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, 1, NUM_PROCESSES);
    8000073a:	4605                	li	a2,1
    8000073c:	4585                	li	a1,1
    8000073e:	00000517          	auipc	a0,0x0
    80000742:	2b250513          	addi	a0,a0,690 # 800009f0 <barrier1>
    80000746:	fdfff0ef          	jal	ra,80000724 <barrier_wait>
  barrier_wait(&barrier2, 1, NUM_PROCESSES);
    8000074a:	4605                	li	a2,1
    8000074c:	4585                	li	a1,1
    8000074e:	00000517          	auipc	a0,0x0
    80000752:	2aa50513          	addi	a0,a0,682 # 800009f8 <barrier2>
    80000756:	fcfff0ef          	jal	ra,80000724 <barrier_wait>
}
    8000075a:	60a2                	ld	ra,8(sp)
    8000075c:	0141                	addi	sp,sp,16
    8000075e:	8082                	ret

0000000080000760 <arch_barrier_down>:

void arch_barrier_down()
{
    80000760:	1141                	addi	sp,sp,-16
    80000762:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, -1, 0);
    80000764:	4601                	li	a2,0
    80000766:	55fd                	li	a1,-1
    80000768:	00000517          	auipc	a0,0x0
    8000076c:	28850513          	addi	a0,a0,648 # 800009f0 <barrier1>
    80000770:	fb5ff0ef          	jal	ra,80000724 <barrier_wait>
  barrier_wait(&barrier2, -1, 0);
    80000774:	4601                	li	a2,0
    80000776:	55fd                	li	a1,-1
    80000778:	00000517          	auipc	a0,0x0
    8000077c:	28050513          	addi	a0,a0,640 # 800009f8 <barrier2>
    80000780:	fa5ff0ef          	jal	ra,80000724 <barrier_wait>
}
    80000784:	60a2                	ld	ra,8(sp)
    80000786:	0141                	addi	sp,sp,16
    80000788:	8082                	ret

000000008000078a <put_char>:
  print_uart(consoleBuffer,consoleBufferLen);
  consoleBufferLen = 0;

}*/
void put_char(char c)
{
    8000078a:	1141                	addi	sp,sp,-16
    8000078c:	e406                	sd	ra,8(sp)

  /*consoleBuffer[consoleBufferLen++] = c;
  if (c == '\n' || consoleBufferLen == sizeof(consoleBuffer)) flush();*/
  write_serial(c);
    8000078e:	02c000ef          	jal	ra,800007ba <write_serial>
}
    80000792:	60a2                	ld	ra,8(sp)
    80000794:	0141                	addi	sp,sp,16
    80000796:	8082                	ret

0000000080000798 <write_reg_u8>:
#include "uart.h"

void write_reg_u8(uintptr_t addr, uint8_t value)
{
    volatile uint8_t *loc_addr = (volatile uint8_t *)addr;
    *loc_addr = value;
    80000798:	00b50023          	sb	a1,0(a0)
}
    8000079c:	8082                	ret

000000008000079e <read_reg_u8>:

uint8_t read_reg_u8(uintptr_t addr)
{
    return *(volatile uint8_t *)addr;
    8000079e:	00054503          	lbu	a0,0(a0)
}
    800007a2:	0ff57513          	zext.b	a0,a0
    800007a6:	8082                	ret

00000000800007a8 <is_transmit_empty>:
    return *(volatile uint8_t *)addr;
    800007a8:	100007b7          	lui	a5,0x10000
    800007ac:	0147c503          	lbu	a0,20(a5) # 10000014 <HARTID+0xffff100>
    800007b0:	0ff57513          	zext.b	a0,a0

int is_transmit_empty()
{
    return read_reg_u8(UART_LINE_STATUS) & 0x20;
}
    800007b4:	02057513          	andi	a0,a0,32
    800007b8:	8082                	ret

00000000800007ba <write_serial>:
    return *(volatile uint8_t *)addr;
    800007ba:	10000737          	lui	a4,0x10000
    800007be:	01474783          	lbu	a5,20(a4) # 10000014 <HARTID+0xffff100>
    800007c2:	0ff7f793          	zext.b	a5,a5

void write_serial(char a)
{
    while (is_transmit_empty() == 0) {};
    800007c6:	0207f793          	andi	a5,a5,32
    800007ca:	dbf5                	beqz	a5,800007be <write_serial+0x4>
    *loc_addr = value;
    800007cc:	100007b7          	lui	a5,0x10000
    800007d0:	00a78023          	sb	a0,0(a5) # 10000000 <HARTID+0xffff0ec>
    //for (int i = 0; i < 100; i++){i++;}

    write_reg_u8(UART_THR, a);
}
    800007d4:	8082                	ret

00000000800007d6 <init_uart>:

void init_uart(uint32_t freq, uint32_t baud)
{
    uint32_t divisor = freq / (baud << 4);
    800007d6:	0045959b          	slliw	a1,a1,0x4
    800007da:	02b5553b          	divuw	a0,a0,a1
    *loc_addr = value;
    800007de:	100007b7          	lui	a5,0x10000
    800007e2:	00078223          	sb	zero,4(a5) # 10000004 <HARTID+0xffff0f0>
    800007e6:	f8000713          	li	a4,-128
    800007ea:	00e78623          	sb	a4,12(a5)

    write_reg_u8(UART_INTERRUPT_ENABLE, 0x00); // Disable all interrupts
    write_reg_u8(UART_LINE_CONTROL, 0x80);     // Enable DLAB (set baud rate divisor)
    write_reg_u8(UART_DLAB_LSB, divisor);         // divisor (lo byte)
    800007ee:	0ff57713          	zext.b	a4,a0
    *loc_addr = value;
    800007f2:	00e78023          	sb	a4,0(a5)
    write_reg_u8(UART_DLAB_MSB, (divisor >> 8) & 0xFF);  // divisor (hi byte)
    800007f6:	0085551b          	srliw	a0,a0,0x8
    800007fa:	0ff57513          	zext.b	a0,a0
    *loc_addr = value;
    800007fe:	00a78223          	sb	a0,4(a5)
    80000802:	470d                	li	a4,3
    80000804:	00e78623          	sb	a4,12(a5)
    80000808:	fc700713          	li	a4,-57
    8000080c:	00e78423          	sb	a4,8(a5)
    80000810:	02000713          	li	a4,32
    80000814:	00e78823          	sb	a4,16(a5)
    write_reg_u8(UART_LINE_CONTROL, 0x03);     // 8 bits, no parity, one stop bit
    write_reg_u8(UART_FIFO_CONTROL, 0xC7);     // Enable FIFO, clear them, with 14-byte threshold
    write_reg_u8(UART_MODEM_CONTROL, 0x20);    // Autoflow mode
}
    80000818:	8082                	ret

000000008000081a <print_uart>:

void print_uart(char *str,int length)
{
    char *cur = &str[0];
    for (int i = 0; i < length; i++)
    8000081a:	02b05963          	blez	a1,8000084c <print_uart+0x32>
{
    8000081e:	1101                	addi	sp,sp,-32
    80000820:	ec06                	sd	ra,24(sp)
    80000822:	e822                	sd	s0,16(sp)
    80000824:	e426                	sd	s1,8(sp)
    80000826:	842a                	mv	s0,a0
    80000828:	fff5849b          	addiw	s1,a1,-1
    8000082c:	1482                	slli	s1,s1,0x20
    8000082e:	9081                	srli	s1,s1,0x20
    80000830:	0485                	addi	s1,s1,1
    80000832:	94aa                	add	s1,s1,a0
    {
        write_serial((uint8_t)*cur);
    80000834:	00044503          	lbu	a0,0(s0)
    80000838:	f83ff0ef          	jal	ra,800007ba <write_serial>
        ++cur;
    8000083c:	0405                	addi	s0,s0,1
    for (int i = 0; i < length; i++)
    8000083e:	fe941be3          	bne	s0,s1,80000834 <print_uart+0x1a>
    /*while (*cur != '\0')
    {
        write_serial((uint8_t)*cur);
        ++cur;
    }*/
}
    80000842:	60e2                	ld	ra,24(sp)
    80000844:	6442                	ld	s0,16(sp)
    80000846:	64a2                	ld	s1,8(sp)
    80000848:	6105                	addi	sp,sp,32
    8000084a:	8082                	ret
    8000084c:	8082                	ret

000000008000084e <bin_to_hex>:
uint8_t bin_to_hex_table[16] = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void bin_to_hex(uint8_t inp, uint8_t res[2])
{
    res[1] = bin_to_hex_table[inp & 0xf];
    8000084e:	00000797          	auipc	a5,0x0
    80000852:	1f278793          	addi	a5,a5,498 # 80000a40 <bin_to_hex_table>
    80000856:	00f57713          	andi	a4,a0,15
    8000085a:	973e                	add	a4,a4,a5
    8000085c:	00074703          	lbu	a4,0(a4)
    80000860:	00e580a3          	sb	a4,1(a1)
    res[0] = bin_to_hex_table[(inp >> 4) & 0xf];
    80000864:	8111                	srli	a0,a0,0x4
    80000866:	97aa                	add	a5,a5,a0
    80000868:	0007c783          	lbu	a5,0(a5)
    8000086c:	00f58023          	sb	a5,0(a1)
    return;
}
    80000870:	8082                	ret

0000000080000872 <print_uart_int>:

void print_uart_int(uint32_t addr)
{
    80000872:	7139                	addi	sp,sp,-64
    80000874:	fc06                	sd	ra,56(sp)
    80000876:	f822                	sd	s0,48(sp)
    80000878:	f426                	sd	s1,40(sp)
    8000087a:	f04a                	sd	s2,32(sp)
    8000087c:	ec4e                	sd	s3,24(sp)
    8000087e:	89aa                	mv	s3,a0
    80000880:	4461                	li	s0,24
    int i;
    for (i = 3; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    80000882:	00810913          	addi	s2,sp,8
    for (i = 3; i > -1; i--)
    80000886:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    80000888:	0089d53b          	srlw	a0,s3,s0
        bin_to_hex(cur, hex);
    8000088c:	85ca                	mv	a1,s2
    8000088e:	0ff57513          	zext.b	a0,a0
    80000892:	fbdff0ef          	jal	ra,8000084e <bin_to_hex>
        write_serial(hex[0]);
    80000896:	00814503          	lbu	a0,8(sp)
    8000089a:	f21ff0ef          	jal	ra,800007ba <write_serial>
        write_serial(hex[1]);
    8000089e:	00914503          	lbu	a0,9(sp)
    800008a2:	f19ff0ef          	jal	ra,800007ba <write_serial>
    for (i = 3; i > -1; i--)
    800008a6:	3461                	addiw	s0,s0,-8
    800008a8:	fe9410e3          	bne	s0,s1,80000888 <print_uart_int+0x16>
    }
}
    800008ac:	70e2                	ld	ra,56(sp)
    800008ae:	7442                	ld	s0,48(sp)
    800008b0:	74a2                	ld	s1,40(sp)
    800008b2:	7902                	ld	s2,32(sp)
    800008b4:	69e2                	ld	s3,24(sp)
    800008b6:	6121                	addi	sp,sp,64
    800008b8:	8082                	ret

00000000800008ba <print_uart_addr>:

void print_uart_addr(uint64_t addr)
{
    800008ba:	7139                	addi	sp,sp,-64
    800008bc:	fc06                	sd	ra,56(sp)
    800008be:	f822                	sd	s0,48(sp)
    800008c0:	f426                	sd	s1,40(sp)
    800008c2:	f04a                	sd	s2,32(sp)
    800008c4:	ec4e                	sd	s3,24(sp)
    800008c6:	89aa                	mv	s3,a0
    800008c8:	03800413          	li	s0,56
    int i;
    for (i = 7; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    800008cc:	00810913          	addi	s2,sp,8
    for (i = 7; i > -1; i--)
    800008d0:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    800008d2:	0089d533          	srl	a0,s3,s0
        bin_to_hex(cur, hex);
    800008d6:	85ca                	mv	a1,s2
    800008d8:	0ff57513          	zext.b	a0,a0
    800008dc:	f73ff0ef          	jal	ra,8000084e <bin_to_hex>
        write_serial(hex[0]);
    800008e0:	00814503          	lbu	a0,8(sp)
    800008e4:	ed7ff0ef          	jal	ra,800007ba <write_serial>
        write_serial(hex[1]);
    800008e8:	00914503          	lbu	a0,9(sp)
    800008ec:	ecfff0ef          	jal	ra,800007ba <write_serial>
    for (i = 7; i > -1; i--)
    800008f0:	3461                	addiw	s0,s0,-8
    800008f2:	fe9410e3          	bne	s0,s1,800008d2 <print_uart_addr+0x18>
    }
}
    800008f6:	70e2                	ld	ra,56(sp)
    800008f8:	7442                	ld	s0,48(sp)
    800008fa:	74a2                	ld	s1,40(sp)
    800008fc:	7902                	ld	s2,32(sp)
    800008fe:	69e2                	ld	s3,24(sp)
    80000900:	6121                	addi	sp,sp,64
    80000902:	8082                	ret

0000000080000904 <print_uart_byte>:

void print_uart_byte(uint8_t byte)
{
    80000904:	1101                	addi	sp,sp,-32
    80000906:	ec06                	sd	ra,24(sp)
    uint8_t hex[2];
    bin_to_hex(byte, hex);
    80000908:	002c                	addi	a1,sp,8
    8000090a:	f45ff0ef          	jal	ra,8000084e <bin_to_hex>
    write_serial(hex[0]);
    8000090e:	00814503          	lbu	a0,8(sp)
    80000912:	ea9ff0ef          	jal	ra,800007ba <write_serial>
    write_serial(hex[1]);
    80000916:	00914503          	lbu	a0,9(sp)
    8000091a:	ea1ff0ef          	jal	ra,800007ba <write_serial>
    8000091e:	60e2                	ld	ra,24(sp)
    80000920:	6105                	addi	sp,sp,32
    80000922:	8082                	ret

0000000080000924 <test_init>:
// =========
// Functions
// =========

void test_init(uint32_t* seed)
{
    80000924:	1101                	addi	sp,sp,-32
    80000926:	ec06                	sd	ra,24(sp)
    80000928:	e822                	sd	s0,16(sp)
    8000092a:	e426                	sd	s1,8(sp)
    8000092c:	84aa                	mv	s1,a0
  //put_string("test_init started\r\n");
  // Randomize variable locations
  uint32_t rs[NUM_VARS];
  for (int i = 0; i < NUM_VARS; i++) {
    retry:
      rs[i] = rand_k(seed, NUM_LOCS - 1);
    8000092e:	65c1                	lui	a1,0x10
    80000930:	15fd                	addi	a1,a1,-1 # ffff <HARTID+0xf0eb>
    80000932:	da3ff0ef          	jal	ra,800006d4 <rand_k>
      for (int j = 0; j < i; j++)
        if (rs[i] == rs[j]) goto retry;
  }
  // Intialise variables
  test.locs = (var_t*) LOCS_BASE;
    80000936:	00000797          	auipc	a5,0x0
    8000093a:	1227b783          	ld	a5,290(a5) # 80000a58 <_GLOBAL_OFFSET_TABLE_+0x8>
    8000093e:	639c                	ld	a5,0(a5)
    80000940:	6711                	lui	a4,0x4
    80000942:	10070713          	addi	a4,a4,256 # 4100 <HARTID+0x31ec>
    80000946:	97ba                	add	a5,a5,a4
    80000948:	00000717          	auipc	a4,0x0
    8000094c:	11873703          	ld	a4,280(a4) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000950:	eb1c                	sd	a5,16(a4)
  for (int i = 0; i < NUM_VARS; i++) {
    test.vars[i] = &test.locs[rs[i]*LOC_GRAIN];
    80000952:	1502                	slli	a0,a0,0x20
    80000954:	9101                	srli	a0,a0,0x20
    80000956:	050a                	slli	a0,a0,0x2
    80000958:	97aa                	add	a5,a5,a0
    8000095a:	ef1c                	sd	a5,24(a4)
    *test.vars[i] = 0;
    8000095c:	0007a023          	sw	zero,0(a5)
  }
  // Set random start delays
  uint32_t max = 0;
  for (int i = 0; i < NUM_PROCESSES; i++)
    if (test.start_times[i] > max) max = test.start_times[i];
    80000960:	471c                	lw	a5,8(a4)
    80000962:	2781                	sext.w	a5,a5
    80000964:	c399                	beqz	a5,8000096a <test_init+0x46>
    80000966:	471c                	lw	a5,8(a4)
    80000968:	2781                	sext.w	a5,a5
  for (int i = 0; i < NUM_PROCESSES; i++){
    test.delays[i] = (max-test.start_times[i])/3; 
    8000096a:	00000417          	auipc	s0,0x0
    8000096e:	0f643403          	ld	s0,246(s0) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000972:	4418                	lw	a4,8(s0)
    80000974:	9f99                	subw	a5,a5,a4
    80000976:	470d                	li	a4,3
    80000978:	02e7d7bb          	divuw	a5,a5,a4
    8000097c:	c45c                	sw	a5,12(s0)
    test.delays[i] += rand_k(seed, 50);  
    8000097e:	03200593          	li	a1,50
    80000982:	8526                	mv	a0,s1
    80000984:	d51ff0ef          	jal	ra,800006d4 <rand_k>
    80000988:	445c                	lw	a5,12(s0)
    8000098a:	9d3d                	addw	a0,a0,a5
    8000098c:	c448                	sw	a0,12(s0)
  }

}
    8000098e:	60e2                	ld	ra,24(sp)
    80000990:	6442                	ld	s0,16(sp)
    80000992:	64a2                	ld	s1,8(sp)
    80000994:	6105                	addi	sp,sp,32
    80000996:	8082                	ret

0000000080000998 <test_body>:
/* Automatically generated by litmus */

void test_body(int pid) {
  switch(pid) {
    80000998:	c111                	beqz	a0,8000099c <test_body+0x4>
    8000099a:	8082                	ret
void test_body(int pid) {
    8000099c:	1141                	addi	sp,sp,-16
    8000099e:	e406                	sd	ra,8(sp)
    800009a0:	e022                	sd	s0,0(sp)
    800009a2:	842a                	mv	s0,a0
    case 0: {
      var_t out0;
      arch_barrier_up();
    800009a4:	d93ff0ef          	jal	ra,80000736 <arch_barrier_up>
      test.start_times[0] = arch_get_counter();
    800009a8:	d75ff0ef          	jal	ra,8000071c <arch_get_counter>
    800009ac:	2501                	sext.w	a0,a0
    800009ae:	00000797          	auipc	a5,0x0
    800009b2:	0b27b783          	ld	a5,178(a5) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
    800009b6:	c788                	sw	a0,8(a5)
      delay(test.delays[0]);
    800009b8:	47dc                	lw	a5,12(a5)
    800009ba:	2781                	sext.w	a5,a5

inline void delay(int n)
{
  for (int i = 0; i < n; i++)
    800009bc:	00f05663          	blez	a5,800009c8 <test_body+0x30>
    asm volatile ("nop\n");
    800009c0:	0001                	nop
  for (int i = 0; i < n; i++)
    800009c2:	2405                	addiw	s0,s0,1
    800009c4:	fe879ee3          	bne	a5,s0,800009c0 <test_body+0x28>
        " lw %0,0(%1) \n"
        " sw %2,0(%1) \n"
      : /* output operands */
        "=&r"(out0)
      : /* input operands */
        "r"(test.vars[0]),"r"(1)
    800009c8:	00000417          	auipc	s0,0x0
    800009cc:	09843403          	ld	s0,152(s0) # 80000a60 <_GLOBAL_OFFSET_TABLE_+0x10>
      asm volatile (
    800009d0:	6c18                	ld	a4,24(s0)
    800009d2:	4685                	li	a3,1
    800009d4:	431c                	lw	a5,0(a4)
    800009d6:	c314                	sw	a3,0(a4)
      );
      test.outcome[1] = out0;
    800009d8:	c05c                	sw	a5,4(s0)
      arch_barrier_down();
    800009da:	d87ff0ef          	jal	ra,80000760 <arch_barrier_down>
       test.outcome[0] = *test.vars[0];
    800009de:	6c1c                	ld	a5,24(s0)
    800009e0:	439c                	lw	a5,0(a5)
    800009e2:	2781                	sext.w	a5,a5
    800009e4:	c01c                	sw	a5,0(s0)
      break;
    }
  }
}
    800009e6:	60a2                	ld	ra,8(sp)
    800009e8:	6402                	ld	s0,0(sp)
    800009ea:	0141                	addi	sp,sp,16
    800009ec:	8082                	ret
