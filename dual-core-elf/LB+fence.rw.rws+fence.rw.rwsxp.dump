
main.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <main-0x20>:
    80000000:	f1402573          	csrr	a0,mhartid
    80000004:	00010117          	auipc	sp,0x10
    80000008:	ffc10113          	addi	sp,sp,-4 # 80010000 <DRAM_TOP>
    8000000c:	00d51513          	slli	a0,a0,0xd
    80000010:	40a10133          	sub	sp,sp,a0
    80000014:	fe010113          	addi	sp,sp,-32
    80000018:	008000ef          	jal	ra,80000020 <main>
    8000001c:	0000006f          	j	8000001c <BOOT_MEM+0x1c>

0000000080000020 <main>:
#include "arch.h"
#include "rand.h"
#include "test.h"

int main()
{
    80000020:	7179                	addi	sp,sp,-48
    80000022:	f406                	sd	ra,40(sp)
    80000024:	f022                	sd	s0,32(sp)
    80000026:	ec26                	sd	s1,24(sp)
    80000028:	e84a                	sd	s2,16(sp)
  // Get my global process id
  int me = arch_get_process_id();
    8000002a:	728000ef          	jal	ra,80000752 <arch_get_process_id>

  // Processes not being used spin here
  if (me >= NUM_PROCESSES) while (1);
    8000002e:	4785                	li	a5,1
    80000030:	00a7d363          	bge	a5,a0,80000036 <main+0x16>
    80000034:	a001                	j	80000034 <main+0x14>
    80000036:	84aa                	mv	s1,a0

  if (me == 0) {
    80000038:	c911                	beqz	a0,8000004c <main+0x2c>
    //put_string("Hello World!\n");
    log_init();
  }

  // Random seed
  uint32_t seed = 29823;
    8000003a:	679d                	lui	a5,0x7
    8000003c:	47f7879b          	addiw	a5,a5,1151 # 747f <HARTID+0x656b>
    80000040:	c63e                	sw	a5,12(sp)
    80000042:	06400413          	li	s0,100

  for (int i = 0; i < NUM_ITERATIONS; i++) {
    if (me == 0) test_init(&seed);
    80000046:	00c10913          	addi	s2,sp,12
    8000004a:	a805                	j	8000007a <main+0x5a>
    init_uart(50000000, 115200*4);
    8000004c:	000715b7          	lui	a1,0x71
    80000050:	80058593          	addi	a1,a1,-2048 # 70800 <HARTID+0x6f8ec>
    80000054:	02faf537          	lui	a0,0x2faf
    80000058:	08050513          	addi	a0,a0,128 # 2faf080 <HARTID+0x2fae16c>
    8000005c:	7b8000ef          	jal	ra,80000814 <init_uart>
    log_init();
    80000060:	12a000ef          	jal	ra,8000018a <log_init>
    80000064:	bfd9                	j	8000003a <main+0x1a>
    if (me == 0) test_init(&seed);
    80000066:	854a                	mv	a0,s2
    80000068:	0fb000ef          	jal	ra,80000962 <test_init>
    test_body(me);
    8000006c:	4501                	li	a0,0
    8000006e:	1a9000ef          	jal	ra,80000a16 <test_body>
    if (me == 0) log_update();
    80000072:	284000ef          	jal	ra,800002f6 <log_update>
  for (int i = 0; i < NUM_ITERATIONS; i++) {
    80000076:	347d                	addiw	s0,s0,-1
    80000078:	c411                	beqz	s0,80000084 <main+0x64>
    if (me == 0) test_init(&seed);
    8000007a:	d4f5                	beqz	s1,80000066 <main+0x46>
    test_body(me);
    8000007c:	8526                	mv	a0,s1
    8000007e:	199000ef          	jal	ra,80000a16 <test_body>
    if (me == 0) log_update();
    80000082:	bfd5                	j	80000076 <main+0x56>
  }

  if (me == 0) {
    80000084:	c881                	beqz	s1,80000094 <main+0x74>
    put_string("Time\n");
    //flush();
  }

  return 0;
}
    80000086:	4501                	li	a0,0
    80000088:	70a2                	ld	ra,40(sp)
    8000008a:	7402                	ld	s0,32(sp)
    8000008c:	64e2                	ld	s1,24(sp)
    8000008e:	6942                	ld	s2,16(sp)
    80000090:	6145                	addi	sp,sp,48
    80000092:	8082                	ret
    log_display();
    80000094:	408000ef          	jal	ra,8000049c <log_display>
    put_string("Time\n");
    80000098:	00001517          	auipc	a0,0x1
    8000009c:	ac850513          	addi	a0,a0,-1336 # 80000b60 <.got.plt+0x10>
    800000a0:	006000ef          	jal	ra,800000a6 <put_string>
  return 0;
    800000a4:	b7cd                	j	80000086 <main+0x66>

00000000800000a6 <put_string>:
// ===============
// Output routines
// ===============

void put_string(char* s)
{
    800000a6:	1141                	addi	sp,sp,-16
    800000a8:	e406                	sd	ra,8(sp)
    800000aa:	e022                	sd	s0,0(sp)
    800000ac:	842a                	mv	s0,a0
  while (*s) { put_char(*s); s++; }
    800000ae:	00054503          	lbu	a0,0(a0)
    800000b2:	c519                	beqz	a0,800000c0 <put_string+0x1a>
    800000b4:	714000ef          	jal	ra,800007c8 <put_char>
    800000b8:	0405                	addi	s0,s0,1
    800000ba:	00044503          	lbu	a0,0(s0)
    800000be:	f97d                	bnez	a0,800000b4 <put_string+0xe>
}
    800000c0:	60a2                	ld	ra,8(sp)
    800000c2:	6402                	ld	s0,0(sp)
    800000c4:	0141                	addi	sp,sp,16
    800000c6:	8082                	ret

00000000800000c8 <put_uint64>:
{
  put_uint64((uint64_t) i);
}

void put_uint64(uint64_t i)
{
    800000c8:	7139                	addi	sp,sp,-64
    800000ca:	fc06                	sd	ra,56(sp)
    800000cc:	f822                	sd	s0,48(sp)
    800000ce:	f426                	sd	s1,40(sp)
  char str[32];
  int n = 0;
  while (i > 0) { str[n] = '0' + (i % 10); i /= 10; n++; }
    800000d0:	c135                	beqz	a0,80000134 <put_uint64+0x6c>
    800000d2:	858a                	mv	a1,sp
    800000d4:	872e                	mv	a4,a1
    800000d6:	4629                	li	a2,10
    800000d8:	4805                	li	a6,1
    800000da:	40b8083b          	subw	a6,a6,a1
    800000de:	48a5                	li	a7,9
    800000e0:	a011                	j	800000e4 <put_uint64+0x1c>
    800000e2:	8536                	mv	a0,a3
    800000e4:	02c576b3          	remu	a3,a0,a2
    800000e8:	0306869b          	addiw	a3,a3,48
    800000ec:	00d70023          	sb	a3,0(a4)
    800000f0:	02c556b3          	divu	a3,a0,a2
    800000f4:	00e807bb          	addw	a5,a6,a4
    800000f8:	0007849b          	sext.w	s1,a5
    800000fc:	0705                	addi	a4,a4,1
    800000fe:	fea8e2e3          	bltu	a7,a0,800000e2 <put_uint64+0x1a>
  if (n == 0)
    80000102:	c88d                	beqz	s1,80000134 <put_uint64+0x6c>
    put_char('0');
  else
    while (n > 0) { n--; put_char(str[n]); }
    80000104:	02905363          	blez	s1,8000012a <put_uint64+0x62>
    80000108:	840a                	mv	s0,sp
    8000010a:	9426                	add	s0,s0,s1
    8000010c:	15fd                	addi	a1,a1,-1
    8000010e:	009587b3          	add	a5,a1,s1
    80000112:	34fd                	addiw	s1,s1,-1
    80000114:	1482                	slli	s1,s1,0x20
    80000116:	9081                	srli	s1,s1,0x20
    80000118:	409784b3          	sub	s1,a5,s1
    8000011c:	fff44503          	lbu	a0,-1(s0)
    80000120:	6a8000ef          	jal	ra,800007c8 <put_char>
    80000124:	147d                	addi	s0,s0,-1
    80000126:	fe941be3          	bne	s0,s1,8000011c <put_uint64+0x54>
}
    8000012a:	70e2                	ld	ra,56(sp)
    8000012c:	7442                	ld	s0,48(sp)
    8000012e:	74a2                	ld	s1,40(sp)
    80000130:	6121                	addi	sp,sp,64
    80000132:	8082                	ret
    put_char('0');
    80000134:	03000513          	li	a0,48
    80000138:	690000ef          	jal	ra,800007c8 <put_char>
    8000013c:	b7fd                	j	8000012a <put_uint64+0x62>

000000008000013e <put_uint32>:
{
    8000013e:	1141                	addi	sp,sp,-16
    80000140:	e406                	sd	ra,8(sp)
  put_uint64((uint64_t) i);
    80000142:	1502                	slli	a0,a0,0x20
    80000144:	9101                	srli	a0,a0,0x20
    80000146:	f83ff0ef          	jal	ra,800000c8 <put_uint64>
}
    8000014a:	60a2                	ld	ra,8(sp)
    8000014c:	0141                	addi	sp,sp,16
    8000014e:	8082                	ret

0000000080000150 <put_int64>:

void put_int64(int64_t i)
{
    80000150:	1141                	addi	sp,sp,-16
    80000152:	e406                	sd	ra,8(sp)
    80000154:	e022                	sd	s0,0(sp)
    80000156:	842a                	mv	s0,a0
  if (i < 0) {
    80000158:	00054963          	bltz	a0,8000016a <put_int64+0x1a>
    put_char('-');
    i = -i;
  }
  put_uint64 ((uint64_t) i);
    8000015c:	8522                	mv	a0,s0
    8000015e:	f6bff0ef          	jal	ra,800000c8 <put_uint64>
}
    80000162:	60a2                	ld	ra,8(sp)
    80000164:	6402                	ld	s0,0(sp)
    80000166:	0141                	addi	sp,sp,16
    80000168:	8082                	ret
    put_char('-');
    8000016a:	02d00513          	li	a0,45
    8000016e:	65a000ef          	jal	ra,800007c8 <put_char>
    i = -i;
    80000172:	40800433          	neg	s0,s0
    80000176:	b7dd                	j	8000015c <put_int64+0xc>

0000000080000178 <halt>:

void halt()
{
    80000178:	1141                	addi	sp,sp,-16
    8000017a:	e406                	sd	ra,8(sp)
  put_string("Halted\n");
    8000017c:	00001517          	auipc	a0,0x1
    80000180:	9ec50513          	addi	a0,a0,-1556 # 80000b68 <.got.plt+0x18>
    80000184:	f23ff0ef          	jal	ra,800000a6 <put_string>
  while(1);
    80000188:	a001                	j	80000188 <halt+0x10>

000000008000018a <log_init>:
// ==================

void log_init()
{
  //put_string("log_init started\r\n");
  global_log.hash_table = (log_entry_t*) HASH_TABLE_BASE;
    8000018a:	00001797          	auipc	a5,0x1
    8000018e:	9ae7b783          	ld	a5,-1618(a5) # 80000b38 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000192:	6394                	ld	a3,0(a5)
    80000194:	00001797          	auipc	a5,0x1
    80000198:	9b47b783          	ld	a5,-1612(a5) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000019c:	10068713          	addi	a4,a3,256
    800001a0:	e798                	sd	a4,8(a5)
  global_log.num_collisions = 0;
    800001a2:	0007a023          	sw	zero,0(a5)
  global_log.num_entries = 0;
    800001a6:	0007a223          	sw	zero,4(a5)
  for (int i = 0; i < HASH_TABLE_SIZE; i++)
    800001aa:	11068793          	addi	a5,a3,272
    800001ae:	6719                	lui	a4,0x6
    800001b0:	11070713          	addi	a4,a4,272 # 6110 <HARTID+0x51fc>
    800001b4:	9736                	add	a4,a4,a3
    global_log.hash_table[i].count = 0;
    800001b6:	0007b023          	sd	zero,0(a5)
  for (int i = 0; i < HASH_TABLE_SIZE; i++)
    800001ba:	07e1                	addi	a5,a5,24
    800001bc:	fee79de3          	bne	a5,a4,800001b6 <log_init+0x2c>
  global_log.headstarts = (uint64_t*) HEADSTARTS_BASE;
    800001c0:	00001797          	auipc	a5,0x1
    800001c4:	9887b783          	ld	a5,-1656(a5) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    800001c8:	eb94                	sd	a3,16(a5)
    800001ca:	4781                	li	a5,0
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    global_log.headstarts[i] = 0;
    800001cc:	00001617          	auipc	a2,0x1
    800001d0:	97c63603          	ld	a2,-1668(a2) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    800001d4:	10000693          	li	a3,256
    global_log.headstarts[i] = 0;
    800001d8:	6a18                	ld	a4,16(a2)
    800001da:	973e                	add	a4,a4,a5
    800001dc:	00073023          	sd	zero,0(a4)
  for (int i = 0; i < NUM_HEADSTARTS; i++)
    800001e0:	07a1                	addi	a5,a5,8
    800001e2:	fed79be3          	bne	a5,a3,800001d8 <log_init+0x4e>
}
    800001e6:	8082                	ret

00000000800001e8 <log_headstart>:

void log_headstart()
{
  for (int i = 1; i < NUM_PROCESSES; i++) {
    // Calculate head-start of process 0 relative to this process
    int64_t headstart = (int64_t) test.start_times[i] - 
    800001e8:	00001717          	auipc	a4,0x1
    800001ec:	95873703          	ld	a4,-1704(a4) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    800001f0:	4b5c                	lw	a5,20(a4)
                        (int64_t) test.start_times[0];
    800001f2:	4b18                	lw	a4,16(a4)
    int64_t headstart = (int64_t) test.start_times[i] - 
    800001f4:	1782                	slli	a5,a5,0x20
    800001f6:	9381                	srli	a5,a5,0x20
                        (int64_t) test.start_times[0];
    800001f8:	1702                	slli	a4,a4,0x20
    800001fa:	9301                	srli	a4,a4,0x20
    int64_t headstart = (int64_t) test.start_times[i] - 
    800001fc:	8f99                	sub	a5,a5,a4
    headstart += NUM_HEADSTARTS/2;
    800001fe:	07c1                	addi	a5,a5,16
    if (headstart >= 0 && headstart < NUM_HEADSTARTS)
    80000200:	477d                	li	a4,31
    80000202:	00f76c63          	bltu	a4,a5,8000021a <log_headstart+0x32>
      global_log.headstarts[headstart]++;
    80000206:	078e                	slli	a5,a5,0x3
    80000208:	00001717          	auipc	a4,0x1
    8000020c:	94073703          	ld	a4,-1728(a4) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    80000210:	6b18                	ld	a4,16(a4)
    80000212:	97ba                	add	a5,a5,a4
    80000214:	6398                	ld	a4,0(a5)
    80000216:	0705                	addi	a4,a4,1
    80000218:	e398                	sd	a4,0(a5)
  }
}
    8000021a:	8082                	ret

000000008000021c <log_add_outcome>:

// Hash table based on code from litmus tool by Luc Maranget and
// Susmit Sarkar.  See <http://diy.inria.fr>.

void log_add_outcome()
{
    8000021c:	1141                	addi	sp,sp,-16
    8000021e:	e406                	sd	ra,8(sp)
  uint32_t h = hash( (uint8_t *) test.outcome
    80000220:	4601                	li	a2,0
    80000222:	45c1                	li	a1,16
    80000224:	00001517          	auipc	a0,0x1
    80000228:	91c53503          	ld	a0,-1764(a0) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    8000022c:	27e000ef          	jal	ra,800004aa <hash>
                   , LEN_OUTCOME*sizeof(var_t)
                   , 0 );
#if DEBUG
  var_t sought[] = OUTCOME_SOUGHT;
#endif
  h = h % HASH_TABLE_SIZE;
    80000230:	3ff57513          	andi	a0,a0,1023
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    log_entry_t *entry = global_log.hash_table + h;
    80000234:	00001797          	auipc	a5,0x1
    80000238:	9147b783          	ld	a5,-1772(a5) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    8000023c:	0087b883          	ld	a7,8(a5)
    80000240:	00151793          	slli	a5,a0,0x1
    80000244:	97aa                	add	a5,a5,a0
    80000246:	078e                	slli	a5,a5,0x3
    80000248:	97c6                	add	a5,a5,a7
    if (entry->count == 0) { /* New entry */
    8000024a:	6b94                	ld	a3,16(a5)
    8000024c:	ca89                	beqz	a3,8000025e <log_add_outcome+0x42>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    8000024e:	4581                	li	a1,0
      return;
    }
    else {
      int found = 1;
      for (int j = 0; j < LEN_OUTCOME; j++)
        if (entry->outcome[j] != test.outcome[j]) { found = 0; break; }
    80000250:	00001617          	auipc	a2,0x1
    80000254:	8f063603          	ld	a2,-1808(a2) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    80000258:	40000313          	li	t1,1024
    8000025c:	a085                	j	800002bc <log_add_outcome+0xa0>
    8000025e:	4581                	li	a1,0
        entry->outcome[j] = test.outcome[j];
    80000260:	00001717          	auipc	a4,0x1
    80000264:	8e073703          	ld	a4,-1824(a4) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000268:	4314                	lw	a3,0(a4)
    8000026a:	c394                	sw	a3,0(a5)
    8000026c:	4354                	lw	a3,4(a4)
    8000026e:	c3d4                	sw	a3,4(a5)
    80000270:	4714                	lw	a3,8(a4)
    80000272:	c794                	sw	a3,8(a5)
    80000274:	4758                	lw	a4,12(a4)
    80000276:	c7d8                	sw	a4,12(a5)
      entry->count = 1;
    80000278:	4705                	li	a4,1
    8000027a:	eb98                	sd	a4,16(a5)
      global_log.num_entries++;
    8000027c:	00001717          	auipc	a4,0x1
    80000280:	8cc73703          	ld	a4,-1844(a4) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    80000284:	435c                	lw	a5,4(a4)
    80000286:	2785                	addiw	a5,a5,1
    80000288:	c35c                	sw	a5,4(a4)
      if (i != 0) global_log.num_collisions++;
    8000028a:	c1bd                	beqz	a1,800002f0 <log_add_outcome+0xd4>
    8000028c:	431c                	lw	a5,0(a4)
    8000028e:	2785                	addiw	a5,a5,1
    80000290:	c31c                	sw	a5,0(a4)
    80000292:	a8b9                	j	800002f0 <log_add_outcome+0xd4>
        return;
      }
    }
    h = (h+1) % HASH_TABLE_SIZE;
  }
  put_string("Hash table is full\n");
    80000294:	00001517          	auipc	a0,0x1
    80000298:	8dc50513          	addi	a0,a0,-1828 # 80000b70 <.got.plt+0x20>
    8000029c:	e0bff0ef          	jal	ra,800000a6 <put_string>
    800002a0:	a881                	j	800002f0 <log_add_outcome+0xd4>
    h = (h+1) % HASH_TABLE_SIZE;
    800002a2:	2505                	addiw	a0,a0,1
    800002a4:	3ff57513          	andi	a0,a0,1023
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    800002a8:	2585                	addiw	a1,a1,1
    800002aa:	fe6585e3          	beq	a1,t1,80000294 <log_add_outcome+0x78>
    log_entry_t *entry = global_log.hash_table + h;
    800002ae:	00151793          	slli	a5,a0,0x1
    800002b2:	97aa                	add	a5,a5,a0
    800002b4:	078e                	slli	a5,a5,0x3
    800002b6:	97c6                	add	a5,a5,a7
    if (entry->count == 0) { /* New entry */
    800002b8:	6b94                	ld	a3,16(a5)
    800002ba:	d2dd                	beqz	a3,80000260 <log_add_outcome+0x44>
        if (entry->outcome[j] != test.outcome[j]) { found = 0; break; }
    800002bc:	4218                	lw	a4,0(a2)
    800002be:	2701                	sext.w	a4,a4
    800002c0:	0007a803          	lw	a6,0(a5)
    800002c4:	fce81fe3          	bne	a6,a4,800002a2 <log_add_outcome+0x86>
    800002c8:	4258                	lw	a4,4(a2)
    800002ca:	2701                	sext.w	a4,a4
    800002cc:	0047a803          	lw	a6,4(a5)
    800002d0:	fce819e3          	bne	a6,a4,800002a2 <log_add_outcome+0x86>
    800002d4:	4618                	lw	a4,8(a2)
    800002d6:	2701                	sext.w	a4,a4
    800002d8:	0087a803          	lw	a6,8(a5)
    800002dc:	fce813e3          	bne	a6,a4,800002a2 <log_add_outcome+0x86>
    800002e0:	4658                	lw	a4,12(a2)
    800002e2:	2701                	sext.w	a4,a4
    800002e4:	00c7a803          	lw	a6,12(a5)
    800002e8:	fae81de3          	bne	a6,a4,800002a2 <log_add_outcome+0x86>
        entry->count++;
    800002ec:	0685                	addi	a3,a3,1
    800002ee:	eb94                	sd	a3,16(a5)
}
    800002f0:	60a2                	ld	ra,8(sp)
    800002f2:	0141                	addi	sp,sp,16
    800002f4:	8082                	ret

00000000800002f6 <log_update>:
// Updating the log
// ================


void log_update()
{
    800002f6:	1141                	addi	sp,sp,-16
    800002f8:	e406                	sd	ra,8(sp)
  log_headstart();
    800002fa:	eefff0ef          	jal	ra,800001e8 <log_headstart>
  log_add_outcome();
    800002fe:	f1fff0ef          	jal	ra,8000021c <log_add_outcome>
}
    80000302:	60a2                	ld	ra,8(sp)
    80000304:	0141                	addi	sp,sp,16
    80000306:	8082                	ret

0000000080000308 <log_display_outcome>:
// ==================
// Displaying the log
// ==================

void log_display_outcome()
{
    80000308:	7171                	addi	sp,sp,-176
    8000030a:	f506                	sd	ra,168(sp)
    8000030c:	f122                	sd	s0,160(sp)
    8000030e:	ed26                	sd	s1,152(sp)
    80000310:	e94a                	sd	s2,144(sp)
    80000312:	e54e                	sd	s3,136(sp)
    80000314:	e152                	sd	s4,128(sp)
    80000316:	fcd6                	sd	s5,120(sp)
    80000318:	f8da                	sd	s6,112(sp)
    8000031a:	f4de                	sd	s7,104(sp)
    8000031c:	f0e2                	sd	s8,96(sp)
    8000031e:	ece6                	sd	s9,88(sp)
    80000320:	e8ea                	sd	s10,80(sp)
    80000322:	e4ee                	sd	s11,72(sp)
  char* outcome_names[] = OUTCOME_NAMES;
    80000324:	00001797          	auipc	a5,0x1
    80000328:	87478793          	addi	a5,a5,-1932 # 80000b98 <.got.plt+0x48>
    8000032c:	f03e                	sd	a5,32(sp)
    8000032e:	00001797          	auipc	a5,0x1
    80000332:	87278793          	addi	a5,a5,-1934 # 80000ba0 <.got.plt+0x50>
    80000336:	f43e                	sd	a5,40(sp)
    80000338:	00001797          	auipc	a5,0x1
    8000033c:	87078793          	addi	a5,a5,-1936 # 80000ba8 <.got.plt+0x58>
    80000340:	f83e                	sd	a5,48(sp)
    80000342:	00001797          	auipc	a5,0x1
    80000346:	86e78793          	addi	a5,a5,-1938 # 80000bb0 <.got.plt+0x60>
    8000034a:	fc3e                	sd	a5,56(sp)
  var_t sought[] = OUTCOME_SOUGHT;
    8000034c:	c802                	sw	zero,16(sp)
    8000034e:	ca02                	sw	zero,20(sp)
    80000350:	cc02                	sw	zero,24(sp)
    80000352:	ce02                	sw	zero,28(sp)
    80000354:	4481                	li	s1,0
  int found = 0;
    80000356:	e402                	sd	zero,8(sp)
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    log_entry_t *entry = global_log.hash_table + i;
    80000358:	00000b17          	auipc	s6,0x0
    8000035c:	7f0b3b03          	ld	s6,2032(s6) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    if (entry->count != 0) {
      put_uint64(entry->count);
      put_string(":> ");
      int got = 1;
    80000360:	4d85                	li	s11,1
      for (int j = 0; j < LEN_OUTCOME; j++) {
        if (entry->outcome[j] != sought[j]) got = 0;
        put_string(outcome_names[j]);
        put_string("=");
    80000362:	00001c97          	auipc	s9,0x1
    80000366:	85ec8c93          	addi	s9,s9,-1954 # 80000bc0 <.got.plt+0x70>
        put_uint32((uint32_t) entry->outcome[j]);
        put_string("; ");
    8000036a:	00001c17          	auipc	s8,0x1
    8000036e:	85ec0c13          	addi	s8,s8,-1954 # 80000bc8 <.got.plt+0x78>
        if (entry->outcome[j] != sought[j]) got = 0;
    80000372:	4d01                	li	s10,0
    80000374:	a889                	j	800003c6 <log_display_outcome+0xbe>
        put_string(outcome_names[j]);
    80000376:	0009b503          	ld	a0,0(s3)
    8000037a:	d2dff0ef          	jal	ra,800000a6 <put_string>
        put_string("=");
    8000037e:	8566                	mv	a0,s9
    80000380:	d27ff0ef          	jal	ra,800000a6 <put_string>
        put_uint32((uint32_t) entry->outcome[j]);
    80000384:	000aa503          	lw	a0,0(s5)
    80000388:	db7ff0ef          	jal	ra,8000013e <put_uint32>
        put_string("; ");
    8000038c:	8562                	mv	a0,s8
    8000038e:	d19ff0ef          	jal	ra,800000a6 <put_string>
      for (int j = 0; j < LEN_OUTCOME; j++) {
    80000392:	0911                	addi	s2,s2,4
    80000394:	0a11                	addi	s4,s4,4
    80000396:	09a1                	addi	s3,s3,8
    80000398:	00890b63          	beq	s2,s0,800003ae <log_display_outcome+0xa6>
        if (entry->outcome[j] != sought[j]) got = 0;
    8000039c:	8aca                	mv	s5,s2
    8000039e:	00092703          	lw	a4,0(s2)
    800003a2:	000a2783          	lw	a5,0(s4)
    800003a6:	fcf708e3          	beq	a4,a5,80000376 <log_display_outcome+0x6e>
    800003aa:	8bea                	mv	s7,s10
    800003ac:	b7e9                	j	80000376 <log_display_outcome+0x6e>
      }
      if (got == 1) found = 1;
    800003ae:	05bb8163          	beq	s7,s11,800003f0 <log_display_outcome+0xe8>
      put_string("\n");
    800003b2:	00001517          	auipc	a0,0x1
    800003b6:	81e50513          	addi	a0,a0,-2018 # 80000bd0 <.got.plt+0x80>
    800003ba:	cedff0ef          	jal	ra,800000a6 <put_string>
  for (int i = 0; i < HASH_TABLE_SIZE; i++) {
    800003be:	04e1                	addi	s1,s1,24
    800003c0:	6799                	lui	a5,0x6
    800003c2:	02f48963          	beq	s1,a5,800003f4 <log_display_outcome+0xec>
    log_entry_t *entry = global_log.hash_table + i;
    800003c6:	008b3403          	ld	s0,8(s6)
    800003ca:	9426                	add	s0,s0,s1
    if (entry->count != 0) {
    800003cc:	6808                	ld	a0,16(s0)
    800003ce:	d965                	beqz	a0,800003be <log_display_outcome+0xb6>
      put_uint64(entry->count);
    800003d0:	cf9ff0ef          	jal	ra,800000c8 <put_uint64>
      put_string(":> ");
    800003d4:	00000517          	auipc	a0,0x0
    800003d8:	7e450513          	addi	a0,a0,2020 # 80000bb8 <.got.plt+0x68>
    800003dc:	ccbff0ef          	jal	ra,800000a6 <put_string>
      for (int j = 0; j < LEN_OUTCOME; j++) {
    800003e0:	8922                	mv	s2,s0
    800003e2:	01010a13          	addi	s4,sp,16
    800003e6:	02010993          	addi	s3,sp,32
    800003ea:	0441                	addi	s0,s0,16
      int got = 1;
    800003ec:	8bee                	mv	s7,s11
    800003ee:	b77d                	j	8000039c <log_display_outcome+0x94>
      if (got == 1) found = 1;
    800003f0:	e45e                	sd	s7,8(sp)
    800003f2:	b7c1                	j	800003b2 <log_display_outcome+0xaa>
    }
  }
  put_string(found ? "Ok\n" : "No\n");
    800003f4:	00000517          	auipc	a0,0x0
    800003f8:	79450513          	addi	a0,a0,1940 # 80000b88 <.got.plt+0x38>
    800003fc:	67a2                	ld	a5,8(sp)
    800003fe:	e789                	bnez	a5,80000408 <log_display_outcome+0x100>
    80000400:	00000517          	auipc	a0,0x0
    80000404:	79050513          	addi	a0,a0,1936 # 80000b90 <.got.plt+0x40>
    80000408:	c9fff0ef          	jal	ra,800000a6 <put_string>
}
    8000040c:	70aa                	ld	ra,168(sp)
    8000040e:	740a                	ld	s0,160(sp)
    80000410:	64ea                	ld	s1,152(sp)
    80000412:	694a                	ld	s2,144(sp)
    80000414:	69aa                	ld	s3,136(sp)
    80000416:	6a0a                	ld	s4,128(sp)
    80000418:	7ae6                	ld	s5,120(sp)
    8000041a:	7b46                	ld	s6,112(sp)
    8000041c:	7ba6                	ld	s7,104(sp)
    8000041e:	7c06                	ld	s8,96(sp)
    80000420:	6ce6                	ld	s9,88(sp)
    80000422:	6d46                	ld	s10,80(sp)
    80000424:	6da6                	ld	s11,72(sp)
    80000426:	614d                	addi	sp,sp,176
    80000428:	8082                	ret

000000008000042a <log_display_headstart>:

void log_display_headstart()
{
    8000042a:	7139                	addi	sp,sp,-64
    8000042c:	fc06                	sd	ra,56(sp)
    8000042e:	f822                	sd	s0,48(sp)
    80000430:	f426                	sd	s1,40(sp)
    80000432:	f04a                	sd	s2,32(sp)
    80000434:	ec4e                	sd	s3,24(sp)
    80000436:	e852                	sd	s4,16(sp)
    80000438:	e456                	sd	s5,8(sp)
  int64_t mid = NUM_HEADSTARTS/2;
  put_string("\nHeadstarts:\n");
    8000043a:	00000517          	auipc	a0,0x0
    8000043e:	79e50513          	addi	a0,a0,1950 # 80000bd8 <.got.plt+0x88>
    80000442:	c65ff0ef          	jal	ra,800000a6 <put_string>
    80000446:	4481                	li	s1,0
    80000448:	5441                	li	s0,-16
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    put_int64(i-mid);
    put_string(": ");
    8000044a:	00000a97          	auipc	s5,0x0
    8000044e:	79ea8a93          	addi	s5,s5,1950 # 80000be8 <.got.plt+0x98>
    put_int64(global_log.headstarts[i]);
    80000452:	00000a17          	auipc	s4,0x0
    80000456:	6f6a3a03          	ld	s4,1782(s4) # 80000b48 <_GLOBAL_OFFSET_TABLE_+0x18>
    put_string("\n");
    8000045a:	00000997          	auipc	s3,0x0
    8000045e:	77698993          	addi	s3,s3,1910 # 80000bd0 <.got.plt+0x80>
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    80000462:	4941                	li	s2,16
    put_int64(i-mid);
    80000464:	8522                	mv	a0,s0
    80000466:	cebff0ef          	jal	ra,80000150 <put_int64>
    put_string(": ");
    8000046a:	8556                	mv	a0,s5
    8000046c:	c3bff0ef          	jal	ra,800000a6 <put_string>
    put_int64(global_log.headstarts[i]);
    80000470:	010a3783          	ld	a5,16(s4)
    80000474:	97a6                	add	a5,a5,s1
    80000476:	6388                	ld	a0,0(a5)
    80000478:	cd9ff0ef          	jal	ra,80000150 <put_int64>
    put_string("\n");
    8000047c:	854e                	mv	a0,s3
    8000047e:	c29ff0ef          	jal	ra,800000a6 <put_string>
  for (int i = 0; i < NUM_HEADSTARTS; i++) {
    80000482:	0405                	addi	s0,s0,1
    80000484:	04a1                	addi	s1,s1,8
    80000486:	fd241fe3          	bne	s0,s2,80000464 <log_display_headstart+0x3a>
  }
}
    8000048a:	70e2                	ld	ra,56(sp)
    8000048c:	7442                	ld	s0,48(sp)
    8000048e:	74a2                	ld	s1,40(sp)
    80000490:	7902                	ld	s2,32(sp)
    80000492:	69e2                	ld	s3,24(sp)
    80000494:	6a42                	ld	s4,16(sp)
    80000496:	6aa2                	ld	s5,8(sp)
    80000498:	6121                	addi	sp,sp,64
    8000049a:	8082                	ret

000000008000049c <log_display>:

void log_display()
{
    8000049c:	1141                	addi	sp,sp,-16
    8000049e:	e406                	sd	ra,8(sp)
  //put_string("log_display started\r\n");
  log_display_outcome();
    800004a0:	e69ff0ef          	jal	ra,80000308 <log_display_outcome>
  #ifdef SHOW_HEADSTARTS
  log_display_headstart();
  #endif
}
    800004a4:	60a2                	ld	ra,8(sp)
    800004a6:	0141                	addi	sp,sp,16
    800004a8:	8082                	ret

00000000800004aa <hash>:
   len = length;
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
   c = initval;         /* the previous hash value */

   /* handle most of the key */
   while (len >= 12)
    800004aa:	47ad                	li	a5,11
    800004ac:	14b7f063          	bgeu	a5,a1,800005ec <hash+0x142>
   len = length;
    800004b0:	882e                	mv	a6,a1
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    800004b2:	9e3786b7          	lui	a3,0x9e378
    800004b6:	9b968693          	addi	a3,a3,-1607 # ffffffff9e3779b9 <DRAM_TOP+0xffffffff1e3679b9>
    800004ba:	8e36                	mv	t3,a3
   while (len >= 12)
    800004bc:	48ad                	li	a7,11
   {
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
      b += (k[4] +((ub4)k[5]<<8) +((ub4)k[6]<<16) +((ub4)k[7]<<24));
    800004be:	00554303          	lbu	t1,5(a0)
    800004c2:	0083131b          	slliw	t1,t1,0x8
    800004c6:	00654783          	lbu	a5,6(a0)
    800004ca:	0107979b          	slliw	a5,a5,0x10
    800004ce:	00f3033b          	addw	t1,t1,a5
    800004d2:	00454783          	lbu	a5,4(a0)
    800004d6:	00f3033b          	addw	t1,t1,a5
    800004da:	00754783          	lbu	a5,7(a0)
    800004de:	0187979b          	slliw	a5,a5,0x18
    800004e2:	00f3033b          	addw	t1,t1,a5
    800004e6:	00d306bb          	addw	a3,t1,a3
      c += (k[8] +((ub4)k[9]<<8) +((ub4)k[10]<<16)+((ub4)k[11]<<24));
    800004ea:	00954303          	lbu	t1,9(a0)
    800004ee:	0083131b          	slliw	t1,t1,0x8
    800004f2:	00a54783          	lbu	a5,10(a0)
    800004f6:	0107979b          	slliw	a5,a5,0x10
    800004fa:	00f3033b          	addw	t1,t1,a5
    800004fe:	00854783          	lbu	a5,8(a0)
    80000502:	00f3033b          	addw	t1,t1,a5
    80000506:	00b54783          	lbu	a5,11(a0)
    8000050a:	0187979b          	slliw	a5,a5,0x18
    8000050e:	00f3033b          	addw	t1,t1,a5
    80000512:	00c3063b          	addw	a2,t1,a2
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    80000516:	00154783          	lbu	a5,1(a0)
    8000051a:	0087979b          	slliw	a5,a5,0x8
    8000051e:	00254703          	lbu	a4,2(a0)
    80000522:	0107171b          	slliw	a4,a4,0x10
      mix(a,b,c);
    80000526:	9fb9                	addw	a5,a5,a4
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    80000528:	00054703          	lbu	a4,0(a0)
      mix(a,b,c);
    8000052c:	9fb9                	addw	a5,a5,a4
      a += (k[0] +((ub4)k[1]<<8) +((ub4)k[2]<<16) +((ub4)k[3]<<24));
    8000052e:	00354703          	lbu	a4,3(a0)
    80000532:	0187171b          	slliw	a4,a4,0x18
      mix(a,b,c);
    80000536:	9fb9                	addw	a5,a5,a4
    80000538:	9f95                	subw	a5,a5,a3
    8000053a:	9f91                	subw	a5,a5,a2
    8000053c:	01c787bb          	addw	a5,a5,t3
    80000540:	00d6571b          	srliw	a4,a2,0xd
    80000544:	8fb9                	xor	a5,a5,a4
    80000546:	2781                	sext.w	a5,a5
    80000548:	9e91                	subw	a3,a3,a2
    8000054a:	40f6833b          	subw	t1,a3,a5
    8000054e:	0087969b          	slliw	a3,a5,0x8
    80000552:	0066c6b3          	xor	a3,a3,t1
    80000556:	2681                	sext.w	a3,a3
    80000558:	9e1d                	subw	a2,a2,a5
    8000055a:	9e15                	subw	a2,a2,a3
    8000055c:	00d6d71b          	srliw	a4,a3,0xd
    80000560:	8f31                	xor	a4,a4,a2
    80000562:	2701                	sext.w	a4,a4
    80000564:	9f95                	subw	a5,a5,a3
    80000566:	40e7863b          	subw	a2,a5,a4
    8000056a:	00c7579b          	srliw	a5,a4,0xc
    8000056e:	8fb1                	xor	a5,a5,a2
    80000570:	2781                	sext.w	a5,a5
    80000572:	9e99                	subw	a3,a3,a4
    80000574:	40f6863b          	subw	a2,a3,a5
    80000578:	0107969b          	slliw	a3,a5,0x10
    8000057c:	8eb1                	xor	a3,a3,a2
    8000057e:	2681                	sext.w	a3,a3
    80000580:	9f1d                	subw	a4,a4,a5
    80000582:	40d7063b          	subw	a2,a4,a3
    80000586:	0056d71b          	srliw	a4,a3,0x5
    8000058a:	8f31                	xor	a4,a4,a2
    8000058c:	2701                	sext.w	a4,a4
    8000058e:	9f95                	subw	a5,a5,a3
    80000590:	9f99                	subw	a5,a5,a4
    80000592:	00375e1b          	srliw	t3,a4,0x3
    80000596:	00fe47b3          	xor	a5,t3,a5
    8000059a:	00078e1b          	sext.w	t3,a5
    8000059e:	9e99                	subw	a3,a3,a4
    800005a0:	41c686bb          	subw	a3,a3,t3
    800005a4:	00ae131b          	slliw	t1,t3,0xa
    800005a8:	00d346b3          	xor	a3,t1,a3
    800005ac:	2681                	sext.w	a3,a3
    800005ae:	41c7073b          	subw	a4,a4,t3
    800005b2:	9f15                	subw	a4,a4,a3
    800005b4:	00f6d61b          	srliw	a2,a3,0xf
    800005b8:	8f31                	xor	a4,a4,a2
    800005ba:	0007061b          	sext.w	a2,a4
      k += 12; len -= 12;
    800005be:	0531                	addi	a0,a0,12
    800005c0:	3851                	addiw	a6,a6,-12
   while (len >= 12)
    800005c2:	ef08eee3          	bltu	a7,a6,800004be <hash+0x14>
   }

   /* handle the last 11 bytes */
   c += length;
    800005c6:	9e2d                	addw	a2,a2,a1
    800005c8:	0006089b          	sext.w	a7,a2
   switch(len) /* all the case statements fall through */
    800005cc:	47ad                	li	a5,11
    800005ce:	0b07e063          	bltu	a5,a6,8000066e <hash+0x1c4>
    800005d2:	1802                	slli	a6,a6,0x20
    800005d4:	02085813          	srli	a6,a6,0x20
    800005d8:	080a                	slli	a6,a6,0x2
    800005da:	00000717          	auipc	a4,0x0
    800005de:	61270713          	addi	a4,a4,1554 # 80000bec <.got.plt+0x9c>
    800005e2:	983a                	add	a6,a6,a4
    800005e4:	00082783          	lw	a5,0(a6)
    800005e8:	97ba                	add	a5,a5,a4
    800005ea:	8782                	jr	a5
   len = length;
    800005ec:	882e                	mv	a6,a1
   a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    800005ee:	9e3786b7          	lui	a3,0x9e378
    800005f2:	9b968693          	addi	a3,a3,-1607 # ffffffff9e3779b9 <DRAM_TOP+0xffffffff1e3679b9>
    800005f6:	8e36                	mv	t3,a3
    800005f8:	b7f9                	j	800005c6 <hash+0x11c>
   {
   case 11: c+=((ub4)k[10]<<24);
    800005fa:	00a54883          	lbu	a7,10(a0)
    800005fe:	0188989b          	slliw	a7,a7,0x18
    80000602:	00c888bb          	addw	a7,a7,a2
   case 10: c+=((ub4)k[9]<<16);
    80000606:	00954783          	lbu	a5,9(a0)
    8000060a:	0107979b          	slliw	a5,a5,0x10
    8000060e:	011788bb          	addw	a7,a5,a7
   case 9 : c+=((ub4)k[8]<<8);
    80000612:	00854783          	lbu	a5,8(a0)
    80000616:	0087979b          	slliw	a5,a5,0x8
    8000061a:	011788bb          	addw	a7,a5,a7
      /* the first byte of c is reserved for the length */
   case 8 : b+=((ub4)k[7]<<24);
    8000061e:	00754783          	lbu	a5,7(a0)
    80000622:	0187979b          	slliw	a5,a5,0x18
    80000626:	9ebd                	addw	a3,a3,a5
   case 7 : b+=((ub4)k[6]<<16);
    80000628:	00654783          	lbu	a5,6(a0)
    8000062c:	0107979b          	slliw	a5,a5,0x10
    80000630:	9ebd                	addw	a3,a3,a5
   case 6 : b+=((ub4)k[5]<<8);
    80000632:	00554783          	lbu	a5,5(a0)
    80000636:	0087979b          	slliw	a5,a5,0x8
    8000063a:	9ebd                	addw	a3,a3,a5
   case 5 : b+=k[4];
    8000063c:	00454783          	lbu	a5,4(a0)
    80000640:	9ebd                	addw	a3,a3,a5
   case 4 : a+=((ub4)k[3]<<24);
    80000642:	00354783          	lbu	a5,3(a0)
    80000646:	0187979b          	slliw	a5,a5,0x18
    8000064a:	01c78e3b          	addw	t3,a5,t3
   case 3 : a+=((ub4)k[2]<<16);
    8000064e:	00254783          	lbu	a5,2(a0)
    80000652:	0107979b          	slliw	a5,a5,0x10
    80000656:	01c78e3b          	addw	t3,a5,t3
   case 2 : a+=((ub4)k[1]<<8);
    8000065a:	00154783          	lbu	a5,1(a0)
    8000065e:	0087979b          	slliw	a5,a5,0x8
    80000662:	01c78e3b          	addw	t3,a5,t3
   case 1 : a+=k[0];
    80000666:	00054783          	lbu	a5,0(a0)
    8000066a:	01c78e3b          	addw	t3,a5,t3
     /* case 0: nothing left to add */
   }
   mix(a,b,c);
    8000066e:	011687bb          	addw	a5,a3,a7
    80000672:	40fe07bb          	subw	a5,t3,a5
    80000676:	00d8de1b          	srliw	t3,a7,0xd
    8000067a:	00fe4e33          	xor	t3,t3,a5
    8000067e:	2e01                	sext.w	t3,t3
    80000680:	411686bb          	subw	a3,a3,a7
    80000684:	41c686bb          	subw	a3,a3,t3
    80000688:	008e171b          	slliw	a4,t3,0x8
    8000068c:	8eb9                	xor	a3,a3,a4
    8000068e:	2681                	sext.w	a3,a3
    80000690:	41c888bb          	subw	a7,a7,t3
    80000694:	40d888bb          	subw	a7,a7,a3
    80000698:	00d6d59b          	srliw	a1,a3,0xd
    8000069c:	0115c5b3          	xor	a1,a1,a7
    800006a0:	2581                	sext.w	a1,a1
    800006a2:	40de0e3b          	subw	t3,t3,a3
    800006a6:	40be0e3b          	subw	t3,t3,a1
    800006aa:	00c5d61b          	srliw	a2,a1,0xc
    800006ae:	01c64633          	xor	a2,a2,t3
    800006b2:	2601                	sext.w	a2,a2
    800006b4:	9e8d                	subw	a3,a3,a1
    800006b6:	9e91                	subw	a3,a3,a2
    800006b8:	0106171b          	slliw	a4,a2,0x10
    800006bc:	8f35                	xor	a4,a4,a3
    800006be:	2701                	sext.w	a4,a4
    800006c0:	9d91                	subw	a1,a1,a2
    800006c2:	9d99                	subw	a1,a1,a4
    800006c4:	0057579b          	srliw	a5,a4,0x5
    800006c8:	8fad                	xor	a5,a5,a1
    800006ca:	2781                	sext.w	a5,a5
    800006cc:	9e19                	subw	a2,a2,a4
    800006ce:	9e1d                	subw	a2,a2,a5
    800006d0:	0037d69b          	srliw	a3,a5,0x3
    800006d4:	8e35                	xor	a2,a2,a3
    800006d6:	2601                	sext.w	a2,a2
    800006d8:	9f1d                	subw	a4,a4,a5
    800006da:	9f11                	subw	a4,a4,a2
    800006dc:	00a6169b          	slliw	a3,a2,0xa
    800006e0:	8f35                	xor	a4,a4,a3
    800006e2:	2701                	sext.w	a4,a4
    800006e4:	9f91                	subw	a5,a5,a2
    800006e6:	9f99                	subw	a5,a5,a4
    800006e8:	00f7571b          	srliw	a4,a4,0xf
    800006ec:	8fb9                	xor	a5,a5,a4
   /* report the result */
   return c;
}
    800006ee:	0007851b          	sext.w	a0,a5
    800006f2:	8082                	ret

00000000800006f4 <rand_bit>:

static const uint32_t a = 69069;
static const uint32_t c = 25173;

inline static uint32_t unlocked_rand(uint32_t *st)  {
  uint32_t r = a * *st + c ;
    800006f4:	411c                	lw	a5,0(a0)
    800006f6:	6745                	lui	a4,0x11
    800006f8:	dcd7071b          	addiw	a4,a4,-563 # 10dcd <HARTID+0xfeb9>
    800006fc:	02e787bb          	mulw	a5,a5,a4
    80000700:	6719                	lui	a4,0x6
    80000702:	2557071b          	addiw	a4,a4,597 # 6255 <HARTID+0x5341>
    80000706:	9fb9                	addw	a5,a5,a4
  *st = r ;
    80000708:	c11c                	sw	a5,0(a0)
  /* Swap high & low bits */
  uint32_t low = r & 0xffff ;
  uint32_t high = r >> 16 ;
  r = high | (low << 16) ;
    8000070a:	0107d51b          	srliw	a0,a5,0x10

int rand_bit(uint32_t *st)  {
  uint32_t r = unlocked_rand(st) ;
  r &= 1 ;
  return r ; 
}
    8000070e:	8905                	andi	a0,a0,1
    80000710:	8082                	ret

0000000080000712 <rand_k>:

uint32_t rand_k(uint32_t *st, uint32_t k) {
    80000712:	832a                	mv	t1,a0
    80000714:	4118                	lw	a4,0(a0)
  uint32_t r = a * *st + c ;
    80000716:	68c5                	lui	a7,0x11
    80000718:	dcd8889b          	addiw	a7,a7,-563 # 10dcd <HARTID+0xfeb9>
    8000071c:	6819                	lui	a6,0x6
    8000071e:	2558081b          	addiw	a6,a6,597 # 6255 <HARTID+0x5341>
  uint32_t r, v ;
  do {
    r = unlocked_rand(st) ;
    v = r % k ;
  } while (r-v > 0xffffffff-k+1) ;
    80000722:	40b0063b          	negw	a2,a1
    80000726:	2601                	sext.w	a2,a2
  uint32_t r = a * *st + c ;
    80000728:	0317073b          	mulw	a4,a4,a7
    8000072c:	0107073b          	addw	a4,a4,a6
  r = high | (low << 16) ;
    80000730:	0107179b          	slliw	a5,a4,0x10
    80000734:	0107569b          	srliw	a3,a4,0x10
    80000738:	8fd5                	or	a5,a5,a3
    8000073a:	2781                	sext.w	a5,a5
    v = r % k ;
    8000073c:	02b7f6bb          	remuw	a3,a5,a1
    80000740:	0006851b          	sext.w	a0,a3
  *st = r ;
    80000744:	2701                	sext.w	a4,a4
  } while (r-v > 0xffffffff-k+1) ;
    80000746:	9f95                	subw	a5,a5,a3
    80000748:	fef660e3          	bltu	a2,a5,80000728 <rand_k+0x16>
    8000074c:	00e32023          	sw	a4,0(t1)
  return v ;
}
    80000750:	8082                	ret

0000000080000752 <arch_get_process_id>:
// Hardware thread id =========================================================

int arch_get_process_id()
{
  uint64_t x;
  asm volatile("csrr %0, 0xf14" : "=r" (x));  //CSRRS rd, csr, x0
    80000752:	f1402573          	csrr	a0,mhartid
  return (int) x;
}
    80000756:	2501                	sext.w	a0,a0
    80000758:	8082                	ret

000000008000075a <arch_get_counter>:
// Hardware counter ===========================================================

uint32_t arch_get_counter()
{
  uint64_t x;
  asm volatile("csrr %0, mcycle" : "=r" (x));
    8000075a:	b0002573          	csrr	a0,mcycle
  return (int) x;
}
    8000075e:	2501                	sext.w	a0,a0
    80000760:	8082                	ret

0000000080000762 <barrier_wait>:
    volatile uint64_t* barrier
  , uint64_t incr_amount
  , uint64_t reach
  )
{
  asm volatile (
    80000762:	00b5332f          	amoadd.d	t1,a1,(a0)
    80000766:	0ff0000f          	fence
    8000076a:	00053303          	ld	t1,0(a0)
    8000076e:	fec31ce3          	bne	t1,a2,80000766 <barrier_wait+0x4>
    "r"(incr_amount),
    "r"(reach)
  : /* clobbered registers */
    "x6"
  );
}
    80000772:	8082                	ret

0000000080000774 <arch_barrier_up>:

void arch_barrier_up()
{
    80000774:	1141                	addi	sp,sp,-16
    80000776:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, 1, NUM_PROCESSES);
    80000778:	4609                	li	a2,2
    8000077a:	4585                	li	a1,1
    8000077c:	00000517          	auipc	a0,0x0
    80000780:	34450513          	addi	a0,a0,836 # 80000ac0 <barrier1>
    80000784:	fdfff0ef          	jal	ra,80000762 <barrier_wait>
  barrier_wait(&barrier2, 1, NUM_PROCESSES);
    80000788:	4609                	li	a2,2
    8000078a:	4585                	li	a1,1
    8000078c:	00000517          	auipc	a0,0x0
    80000790:	33c50513          	addi	a0,a0,828 # 80000ac8 <barrier2>
    80000794:	fcfff0ef          	jal	ra,80000762 <barrier_wait>
}
    80000798:	60a2                	ld	ra,8(sp)
    8000079a:	0141                	addi	sp,sp,16
    8000079c:	8082                	ret

000000008000079e <arch_barrier_down>:

void arch_barrier_down()
{
    8000079e:	1141                	addi	sp,sp,-16
    800007a0:	e406                	sd	ra,8(sp)
  barrier_wait(&barrier1, -1, 0);
    800007a2:	4601                	li	a2,0
    800007a4:	55fd                	li	a1,-1
    800007a6:	00000517          	auipc	a0,0x0
    800007aa:	31a50513          	addi	a0,a0,794 # 80000ac0 <barrier1>
    800007ae:	fb5ff0ef          	jal	ra,80000762 <barrier_wait>
  barrier_wait(&barrier2, -1, 0);
    800007b2:	4601                	li	a2,0
    800007b4:	55fd                	li	a1,-1
    800007b6:	00000517          	auipc	a0,0x0
    800007ba:	31250513          	addi	a0,a0,786 # 80000ac8 <barrier2>
    800007be:	fa5ff0ef          	jal	ra,80000762 <barrier_wait>
}
    800007c2:	60a2                	ld	ra,8(sp)
    800007c4:	0141                	addi	sp,sp,16
    800007c6:	8082                	ret

00000000800007c8 <put_char>:
  print_uart(consoleBuffer,consoleBufferLen);
  consoleBufferLen = 0;

}*/
void put_char(char c)
{
    800007c8:	1141                	addi	sp,sp,-16
    800007ca:	e406                	sd	ra,8(sp)

  /*consoleBuffer[consoleBufferLen++] = c;
  if (c == '\n' || consoleBufferLen == sizeof(consoleBuffer)) flush();*/
  write_serial(c);
    800007cc:	02c000ef          	jal	ra,800007f8 <write_serial>
}
    800007d0:	60a2                	ld	ra,8(sp)
    800007d2:	0141                	addi	sp,sp,16
    800007d4:	8082                	ret

00000000800007d6 <write_reg_u8>:
#include "uart.h"

void write_reg_u8(uintptr_t addr, uint8_t value)
{
    volatile uint8_t *loc_addr = (volatile uint8_t *)addr;
    *loc_addr = value;
    800007d6:	00b50023          	sb	a1,0(a0)
}
    800007da:	8082                	ret

00000000800007dc <read_reg_u8>:

uint8_t read_reg_u8(uintptr_t addr)
{
    return *(volatile uint8_t *)addr;
    800007dc:	00054503          	lbu	a0,0(a0)
}
    800007e0:	0ff57513          	zext.b	a0,a0
    800007e4:	8082                	ret

00000000800007e6 <is_transmit_empty>:
    return *(volatile uint8_t *)addr;
    800007e6:	100007b7          	lui	a5,0x10000
    800007ea:	0147c503          	lbu	a0,20(a5) # 10000014 <HARTID+0xffff100>
    800007ee:	0ff57513          	zext.b	a0,a0

int is_transmit_empty()
{
    return read_reg_u8(UART_LINE_STATUS) & 0x20;
}
    800007f2:	02057513          	andi	a0,a0,32
    800007f6:	8082                	ret

00000000800007f8 <write_serial>:
    return *(volatile uint8_t *)addr;
    800007f8:	10000737          	lui	a4,0x10000
    800007fc:	01474783          	lbu	a5,20(a4) # 10000014 <HARTID+0xffff100>
    80000800:	0ff7f793          	zext.b	a5,a5

void write_serial(char a)
{
    while (is_transmit_empty() == 0) {};
    80000804:	0207f793          	andi	a5,a5,32
    80000808:	dbf5                	beqz	a5,800007fc <write_serial+0x4>
    *loc_addr = value;
    8000080a:	100007b7          	lui	a5,0x10000
    8000080e:	00a78023          	sb	a0,0(a5) # 10000000 <HARTID+0xffff0ec>
    //for (int i = 0; i < 100; i++){i++;}

    write_reg_u8(UART_THR, a);
}
    80000812:	8082                	ret

0000000080000814 <init_uart>:

void init_uart(uint32_t freq, uint32_t baud)
{
    uint32_t divisor = freq / (baud << 4);
    80000814:	0045959b          	slliw	a1,a1,0x4
    80000818:	02b5553b          	divuw	a0,a0,a1
    *loc_addr = value;
    8000081c:	100007b7          	lui	a5,0x10000
    80000820:	00078223          	sb	zero,4(a5) # 10000004 <HARTID+0xffff0f0>
    80000824:	f8000713          	li	a4,-128
    80000828:	00e78623          	sb	a4,12(a5)

    write_reg_u8(UART_INTERRUPT_ENABLE, 0x00); // Disable all interrupts
    write_reg_u8(UART_LINE_CONTROL, 0x80);     // Enable DLAB (set baud rate divisor)
    write_reg_u8(UART_DLAB_LSB, divisor);         // divisor (lo byte)
    8000082c:	0ff57713          	zext.b	a4,a0
    *loc_addr = value;
    80000830:	00e78023          	sb	a4,0(a5)
    write_reg_u8(UART_DLAB_MSB, (divisor >> 8) & 0xFF);  // divisor (hi byte)
    80000834:	0085551b          	srliw	a0,a0,0x8
    80000838:	0ff57513          	zext.b	a0,a0
    *loc_addr = value;
    8000083c:	00a78223          	sb	a0,4(a5)
    80000840:	470d                	li	a4,3
    80000842:	00e78623          	sb	a4,12(a5)
    80000846:	fc700713          	li	a4,-57
    8000084a:	00e78423          	sb	a4,8(a5)
    8000084e:	02000713          	li	a4,32
    80000852:	00e78823          	sb	a4,16(a5)
    write_reg_u8(UART_LINE_CONTROL, 0x03);     // 8 bits, no parity, one stop bit
    write_reg_u8(UART_FIFO_CONTROL, 0xC7);     // Enable FIFO, clear them, with 14-byte threshold
    write_reg_u8(UART_MODEM_CONTROL, 0x20);    // Autoflow mode
}
    80000856:	8082                	ret

0000000080000858 <print_uart>:

void print_uart(char *str,int length)
{
    char *cur = &str[0];
    for (int i = 0; i < length; i++)
    80000858:	02b05963          	blez	a1,8000088a <print_uart+0x32>
{
    8000085c:	1101                	addi	sp,sp,-32
    8000085e:	ec06                	sd	ra,24(sp)
    80000860:	e822                	sd	s0,16(sp)
    80000862:	e426                	sd	s1,8(sp)
    80000864:	842a                	mv	s0,a0
    80000866:	fff5849b          	addiw	s1,a1,-1
    8000086a:	1482                	slli	s1,s1,0x20
    8000086c:	9081                	srli	s1,s1,0x20
    8000086e:	0485                	addi	s1,s1,1
    80000870:	94aa                	add	s1,s1,a0
    {
        write_serial((uint8_t)*cur);
    80000872:	00044503          	lbu	a0,0(s0)
    80000876:	f83ff0ef          	jal	ra,800007f8 <write_serial>
        ++cur;
    8000087a:	0405                	addi	s0,s0,1
    for (int i = 0; i < length; i++)
    8000087c:	fe941be3          	bne	s0,s1,80000872 <print_uart+0x1a>
    /*while (*cur != '\0')
    {
        write_serial((uint8_t)*cur);
        ++cur;
    }*/
}
    80000880:	60e2                	ld	ra,24(sp)
    80000882:	6442                	ld	s0,16(sp)
    80000884:	64a2                	ld	s1,8(sp)
    80000886:	6105                	addi	sp,sp,32
    80000888:	8082                	ret
    8000088a:	8082                	ret

000000008000088c <bin_to_hex>:
uint8_t bin_to_hex_table[16] = {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void bin_to_hex(uint8_t inp, uint8_t res[2])
{
    res[1] = bin_to_hex_table[inp & 0xf];
    8000088c:	00000797          	auipc	a5,0x0
    80000890:	29478793          	addi	a5,a5,660 # 80000b20 <bin_to_hex_table>
    80000894:	00f57713          	andi	a4,a0,15
    80000898:	973e                	add	a4,a4,a5
    8000089a:	00074703          	lbu	a4,0(a4)
    8000089e:	00e580a3          	sb	a4,1(a1)
    res[0] = bin_to_hex_table[(inp >> 4) & 0xf];
    800008a2:	8111                	srli	a0,a0,0x4
    800008a4:	97aa                	add	a5,a5,a0
    800008a6:	0007c783          	lbu	a5,0(a5)
    800008aa:	00f58023          	sb	a5,0(a1)
    return;
}
    800008ae:	8082                	ret

00000000800008b0 <print_uart_int>:

void print_uart_int(uint32_t addr)
{
    800008b0:	7139                	addi	sp,sp,-64
    800008b2:	fc06                	sd	ra,56(sp)
    800008b4:	f822                	sd	s0,48(sp)
    800008b6:	f426                	sd	s1,40(sp)
    800008b8:	f04a                	sd	s2,32(sp)
    800008ba:	ec4e                	sd	s3,24(sp)
    800008bc:	89aa                	mv	s3,a0
    800008be:	4461                	li	s0,24
    int i;
    for (i = 3; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    800008c0:	00810913          	addi	s2,sp,8
    for (i = 3; i > -1; i--)
    800008c4:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    800008c6:	0089d53b          	srlw	a0,s3,s0
        bin_to_hex(cur, hex);
    800008ca:	85ca                	mv	a1,s2
    800008cc:	0ff57513          	zext.b	a0,a0
    800008d0:	fbdff0ef          	jal	ra,8000088c <bin_to_hex>
        write_serial(hex[0]);
    800008d4:	00814503          	lbu	a0,8(sp)
    800008d8:	f21ff0ef          	jal	ra,800007f8 <write_serial>
        write_serial(hex[1]);
    800008dc:	00914503          	lbu	a0,9(sp)
    800008e0:	f19ff0ef          	jal	ra,800007f8 <write_serial>
    for (i = 3; i > -1; i--)
    800008e4:	3461                	addiw	s0,s0,-8
    800008e6:	fe9410e3          	bne	s0,s1,800008c6 <print_uart_int+0x16>
    }
}
    800008ea:	70e2                	ld	ra,56(sp)
    800008ec:	7442                	ld	s0,48(sp)
    800008ee:	74a2                	ld	s1,40(sp)
    800008f0:	7902                	ld	s2,32(sp)
    800008f2:	69e2                	ld	s3,24(sp)
    800008f4:	6121                	addi	sp,sp,64
    800008f6:	8082                	ret

00000000800008f8 <print_uart_addr>:

void print_uart_addr(uint64_t addr)
{
    800008f8:	7139                	addi	sp,sp,-64
    800008fa:	fc06                	sd	ra,56(sp)
    800008fc:	f822                	sd	s0,48(sp)
    800008fe:	f426                	sd	s1,40(sp)
    80000900:	f04a                	sd	s2,32(sp)
    80000902:	ec4e                	sd	s3,24(sp)
    80000904:	89aa                	mv	s3,a0
    80000906:	03800413          	li	s0,56
    int i;
    for (i = 7; i > -1; i--)
    {
        uint8_t cur = (addr >> (i * 8)) & 0xff;
        uint8_t hex[2];
        bin_to_hex(cur, hex);
    8000090a:	00810913          	addi	s2,sp,8
    for (i = 7; i > -1; i--)
    8000090e:	54e1                	li	s1,-8
        uint8_t cur = (addr >> (i * 8)) & 0xff;
    80000910:	0089d533          	srl	a0,s3,s0
        bin_to_hex(cur, hex);
    80000914:	85ca                	mv	a1,s2
    80000916:	0ff57513          	zext.b	a0,a0
    8000091a:	f73ff0ef          	jal	ra,8000088c <bin_to_hex>
        write_serial(hex[0]);
    8000091e:	00814503          	lbu	a0,8(sp)
    80000922:	ed7ff0ef          	jal	ra,800007f8 <write_serial>
        write_serial(hex[1]);
    80000926:	00914503          	lbu	a0,9(sp)
    8000092a:	ecfff0ef          	jal	ra,800007f8 <write_serial>
    for (i = 7; i > -1; i--)
    8000092e:	3461                	addiw	s0,s0,-8
    80000930:	fe9410e3          	bne	s0,s1,80000910 <print_uart_addr+0x18>
    }
}
    80000934:	70e2                	ld	ra,56(sp)
    80000936:	7442                	ld	s0,48(sp)
    80000938:	74a2                	ld	s1,40(sp)
    8000093a:	7902                	ld	s2,32(sp)
    8000093c:	69e2                	ld	s3,24(sp)
    8000093e:	6121                	addi	sp,sp,64
    80000940:	8082                	ret

0000000080000942 <print_uart_byte>:

void print_uart_byte(uint8_t byte)
{
    80000942:	1101                	addi	sp,sp,-32
    80000944:	ec06                	sd	ra,24(sp)
    uint8_t hex[2];
    bin_to_hex(byte, hex);
    80000946:	002c                	addi	a1,sp,8
    80000948:	f45ff0ef          	jal	ra,8000088c <bin_to_hex>
    write_serial(hex[0]);
    8000094c:	00814503          	lbu	a0,8(sp)
    80000950:	ea9ff0ef          	jal	ra,800007f8 <write_serial>
    write_serial(hex[1]);
    80000954:	00914503          	lbu	a0,9(sp)
    80000958:	ea1ff0ef          	jal	ra,800007f8 <write_serial>
    8000095c:	60e2                	ld	ra,24(sp)
    8000095e:	6105                	addi	sp,sp,32
    80000960:	8082                	ret

0000000080000962 <test_init>:
// =========
// Functions
// =========

void test_init(uint32_t* seed)
{
    80000962:	7179                	addi	sp,sp,-48
    80000964:	f406                	sd	ra,40(sp)
    80000966:	f022                	sd	s0,32(sp)
    80000968:	ec26                	sd	s1,24(sp)
    8000096a:	e84a                	sd	s2,16(sp)
    8000096c:	e44e                	sd	s3,8(sp)
    8000096e:	892a                	mv	s2,a0
  //put_string("test_init started\r\n");
  // Randomize variable locations
  uint32_t rs[NUM_VARS];
  for (int i = 0; i < NUM_VARS; i++) {
    retry:
      rs[i] = rand_k(seed, NUM_LOCS - 1);
    80000970:	65c1                	lui	a1,0x10
    80000972:	15fd                	addi	a1,a1,-1 # ffff <HARTID+0xf0eb>
    80000974:	d9fff0ef          	jal	ra,80000712 <rand_k>
      for (int j = 0; j < i; j++)
        if (rs[i] == rs[j]) goto retry;
  }
  // Intialise variables
  test.locs = (var_t*) LOCS_BASE;
    80000978:	00000797          	auipc	a5,0x0
    8000097c:	1c07b783          	ld	a5,448(a5) # 80000b38 <_GLOBAL_OFFSET_TABLE_+0x8>
    80000980:	639c                	ld	a5,0(a5)
    80000982:	6719                	lui	a4,0x6
    80000984:	10070713          	addi	a4,a4,256 # 6100 <HARTID+0x51ec>
    80000988:	97ba                	add	a5,a5,a4
    8000098a:	00000717          	auipc	a4,0x0
    8000098e:	1b673703          	ld	a4,438(a4) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000992:	f31c                	sd	a5,32(a4)
  for (int i = 0; i < NUM_VARS; i++) {
    test.vars[i] = &test.locs[rs[i]*LOC_GRAIN];
    80000994:	1502                	slli	a0,a0,0x20
    80000996:	9101                	srli	a0,a0,0x20
    80000998:	050a                	slli	a0,a0,0x2
    8000099a:	97aa                	add	a5,a5,a0
    8000099c:	f71c                	sd	a5,40(a4)
    *test.vars[i] = 0;
    8000099e:	0007a023          	sw	zero,0(a5)
  }
  // Set random start delays
  uint32_t max = 0;
  for (int i = 0; i < NUM_PROCESSES; i++)
    if (test.start_times[i] > max) max = test.start_times[i];
    800009a2:	4b00                	lw	s0,16(a4)
    800009a4:	2401                	sext.w	s0,s0
    800009a6:	c019                	beqz	s0,800009ac <test_init+0x4a>
    800009a8:	4b00                	lw	s0,16(a4)
    800009aa:	2401                	sext.w	s0,s0
    800009ac:	00000797          	auipc	a5,0x0
    800009b0:	1947b783          	ld	a5,404(a5) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    800009b4:	4bdc                	lw	a5,20(a5)
    800009b6:	2781                	sext.w	a5,a5
    800009b8:	00f47863          	bgeu	s0,a5,800009c8 <test_init+0x66>
    800009bc:	00000797          	auipc	a5,0x0
    800009c0:	1847b783          	ld	a5,388(a5) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    800009c4:	4bc0                	lw	s0,20(a5)
    800009c6:	2401                	sext.w	s0,s0
  for (int i = 0; i < NUM_PROCESSES; i++){
    test.delays[i] = (max-test.start_times[i])/3; 
    800009c8:	00000497          	auipc	s1,0x0
    800009cc:	1784b483          	ld	s1,376(s1) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    800009d0:	489c                	lw	a5,16(s1)
    800009d2:	40f407bb          	subw	a5,s0,a5
    800009d6:	498d                	li	s3,3
    800009d8:	0337d7bb          	divuw	a5,a5,s3
    800009dc:	cc9c                	sw	a5,24(s1)
    test.delays[i] += rand_k(seed, 50);  
    800009de:	03200593          	li	a1,50
    800009e2:	854a                	mv	a0,s2
    800009e4:	d2fff0ef          	jal	ra,80000712 <rand_k>
    800009e8:	4c9c                	lw	a5,24(s1)
    800009ea:	9d3d                	addw	a0,a0,a5
    800009ec:	cc88                	sw	a0,24(s1)
    test.delays[i] = (max-test.start_times[i])/3; 
    800009ee:	48dc                	lw	a5,20(s1)
    800009f0:	9c1d                	subw	s0,s0,a5
    800009f2:	0334543b          	divuw	s0,s0,s3
    800009f6:	ccc0                	sw	s0,28(s1)
    test.delays[i] += rand_k(seed, 50);  
    800009f8:	03200593          	li	a1,50
    800009fc:	854a                	mv	a0,s2
    800009fe:	d15ff0ef          	jal	ra,80000712 <rand_k>
    80000a02:	4cdc                	lw	a5,28(s1)
    80000a04:	9d3d                	addw	a0,a0,a5
    80000a06:	ccc8                	sw	a0,28(s1)
  }

}
    80000a08:	70a2                	ld	ra,40(sp)
    80000a0a:	7402                	ld	s0,32(sp)
    80000a0c:	64e2                	ld	s1,24(sp)
    80000a0e:	6942                	ld	s2,16(sp)
    80000a10:	69a2                	ld	s3,8(sp)
    80000a12:	6145                	addi	sp,sp,48
    80000a14:	8082                	ret

0000000080000a16 <test_body>:
/* Automatically generated by litmus */

void test_body(int pid) {
    80000a16:	1141                	addi	sp,sp,-16
    80000a18:	e406                	sd	ra,8(sp)
    80000a1a:	e022                	sd	s0,0(sp)
    80000a1c:	842a                	mv	s0,a0
  switch(pid) {
    80000a1e:	c901                	beqz	a0,80000a2e <test_body+0x18>
    80000a20:	4785                	li	a5,1
    80000a22:	04f50a63          	beq	a0,a5,80000a76 <test_body+0x60>
      test.outcome[3] = out1;
      arch_barrier_down();
      break;
    }
  }
}
    80000a26:	60a2                	ld	ra,8(sp)
    80000a28:	6402                	ld	s0,0(sp)
    80000a2a:	0141                	addi	sp,sp,16
    80000a2c:	8082                	ret
      arch_barrier_up();
    80000a2e:	d47ff0ef          	jal	ra,80000774 <arch_barrier_up>
      test.start_times[0] = arch_get_counter();
    80000a32:	d29ff0ef          	jal	ra,8000075a <arch_get_counter>
    80000a36:	2501                	sext.w	a0,a0
    80000a38:	00000797          	auipc	a5,0x0
    80000a3c:	1087b783          	ld	a5,264(a5) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000a40:	cb88                	sw	a0,16(a5)
      delay(test.delays[0]);
    80000a42:	4f9c                	lw	a5,24(a5)
    80000a44:	2781                	sext.w	a5,a5

inline void delay(int n)
{
  for (int i = 0; i < n; i++)
    80000a46:	00f05663          	blez	a5,80000a52 <test_body+0x3c>
    asm volatile ("nop\n");
    80000a4a:	0001                	nop
  for (int i = 0; i < n; i++)
    80000a4c:	2405                	addiw	s0,s0,1
    80000a4e:	fe879ee3          	bne	a5,s0,80000a4a <test_body+0x34>
        "r"(test.vars[0]),"r"(1)
    80000a52:	00000417          	auipc	s0,0x0
    80000a56:	0ee43403          	ld	s0,238(s0) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
      asm volatile (
    80000a5a:	7418                	ld	a4,40(s0)
    80000a5c:	4685                	li	a3,1
    80000a5e:	431c                	lw	a5,0(a4)
    80000a60:	0330000f          	fence	rw,rw
    80000a64:	c314                	sw	a3,0(a4)
      test.outcome[1] = out0;
    80000a66:	c05c                	sw	a5,4(s0)
      arch_barrier_down();
    80000a68:	d37ff0ef          	jal	ra,8000079e <arch_barrier_down>
       test.outcome[0] = *test.vars[0];
    80000a6c:	741c                	ld	a5,40(s0)
    80000a6e:	439c                	lw	a5,0(a5)
    80000a70:	2781                	sext.w	a5,a5
    80000a72:	c01c                	sw	a5,0(s0)
      break;
    80000a74:	bf4d                	j	80000a26 <test_body+0x10>
      arch_barrier_up();
    80000a76:	cffff0ef          	jal	ra,80000774 <arch_barrier_up>
      test.start_times[1] = arch_get_counter();
    80000a7a:	ce1ff0ef          	jal	ra,8000075a <arch_get_counter>
    80000a7e:	2501                	sext.w	a0,a0
    80000a80:	00000797          	auipc	a5,0x0
    80000a84:	0c07b783          	ld	a5,192(a5) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
    80000a88:	cbc8                	sw	a0,20(a5)
      delay(test.delays[1]);
    80000a8a:	4fd8                	lw	a4,28(a5)
    80000a8c:	2701                	sext.w	a4,a4
    80000a8e:	00e05763          	blez	a4,80000a9c <test_body+0x86>
    80000a92:	4781                	li	a5,0
    asm volatile ("nop\n");
    80000a94:	0001                	nop
  for (int i = 0; i < n; i++)
    80000a96:	2785                	addiw	a5,a5,1
    80000a98:	fef71ee3          	bne	a4,a5,80000a94 <test_body+0x7e>
        "r"(test.vars[0]),"r"(2)
    80000a9c:	00000797          	auipc	a5,0x0
    80000aa0:	0a47b783          	ld	a5,164(a5) # 80000b40 <_GLOBAL_OFFSET_TABLE_+0x10>
      asm volatile (
    80000aa4:	7798                	ld	a4,40(a5)
    80000aa6:	4689                	li	a3,2
    80000aa8:	1007262f          	lr.w	a2,(a4)
    80000aac:	18c725af          	sc.w	a1,a2,(a4)
    80000ab0:	0330000f          	fence	rw,rw
    80000ab4:	c314                	sw	a3,0(a4)
      test.outcome[2] = out0;
    80000ab6:	c78c                	sw	a1,8(a5)
      test.outcome[3] = out1;
    80000ab8:	c7d0                	sw	a2,12(a5)
      arch_barrier_down();
    80000aba:	ce5ff0ef          	jal	ra,8000079e <arch_barrier_down>
}
    80000abe:	b7a5                	j	80000a26 <test_body+0x10>
